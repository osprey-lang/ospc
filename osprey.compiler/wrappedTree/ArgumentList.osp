use namespace aves;

namespace osprey.compiler.syntax.wrapped;

/// Summary: Implements an immutable list of {WrappedExpression} instances, which
///          represent arguments to a function member (such as a method, indexer
///          or constructor). This collection is a specialised kind of {WrappedNodeList},
///          containing members that simplify handling of argument lists.
public inheritable WrappedArgumentList is WrappedNodeList
{
	public new()
	{
		new this([], false);
	}
	public new(items)
	{
		new base(items);
	}
	public new(items, hasRefArguments)
	{
		new base(items);
		_hasRefArguments = bool(hasRefArguments);
	}

	private _hasRefArguments;
	/// Summary: Determines whether the argument list contains any {WrappedRefExpression}s;
	///          that is, whether any argument is passed by reference.
	public get hasRefArguments
	{
		// Initialize on demand
		if _hasRefArguments is null:
			_hasRefArguments = any(isByRef);
		return _hasRefArguments;
	}

	private static isByRef(expr)
	{
		return expr is WrappedRefExpression;
	}

	private static _emptyList = new WrappedArgumentList();

	/// Summary: Gets an empty {WrappedArgumentList}.
	/// Returns: A {WrappedArgumentList} with a length of 0.
	public static get emptyList = _emptyList;
}
