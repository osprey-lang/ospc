use namespace aves;

namespace osprey.compiler.syntax.wrapped;

/// Summary: Implements a mutable collection of {WrappedNode} instances. This collection
///          is a more specialised kind of {SyntaxList}, and has methods for manipulating
///          wrapped nodes. It also adds a {setItem} method, which mutates the list.
public inheritable WrappedNodeList is SyntaxList
{
	public new()
	{
		new base([]);
	}
	public new(items)
	{
		new base(items);
	}

	/// Summary: Sets the item at the specified index to a new value.
	/// Param index: The index of the item to set.
	/// Param value: The new value to insert at {index}.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero, or greater than or equal to {length}.
	public setItem(index, value)
	{
		collection[index] = value;
	}

	/// Summary: Calls `accept` on each {ParseNode} in the collection, passing the specified
	///          visitor and argument to the nodes.
	/// Param visitor: An object that can visit the nodes in this collection.
	/// Param arg:     An object that is passed to the `accept` method of each node.
	public acceptAll(visitor, arg)
	{
		for node in collection:
			node.accept(visitor, arg);
	}

	/// Summary: Calls `accept` on each {ParseNode} in the collection, passing the specified
	///          visitor and argument to the nodes, and optionally updating the argument to
	///          the return value of each visit.
	/// Param visitor: An object that can visit the nodes in this collection.
	/// Param arg:     An object that is passed to the `accept` method of each node, or to
	///                the first node only.
	/// Param updateArg: If true, the return value of each visit becomes the second argument
	///                to the next visit. The {arg} parameter contains the argument passed
	///                to the first node.
	/// Returns: If {updateArg} is true, returns the return value of the last visit.
	///          Otherwise, returns null.
	public acceptAll(visitor, arg, updateArg)
	{
		if not updateArg:
			return acceptAll(visitor, arg);

		for node in collection:
			arg = node.accept(visitor, arg);

		return arg;
	}
}
