use namespace aves;
use namespace osprey.compiler.syntax;

namespace osprey.compiler;

/// Summary: Exposes an interface for managing errors that occur during compilation.
///          The {addError} method is used for registering a compile-time error, and
///          no particular behaviour is guaranteed. Specifically, {addError} is NOT
///          guaranteed to throw anything. Instead, it is the callerâ€™s responsibility
///          to decide whether (and if so, how) to continue after adding an error.
///
///          Instances of this class also collect compiler warnings.
///
///          This class is abstract.
/// Remarks: Not all parts of the parser/compiler make use of this class. Some errors
///          are fatal and cannot be recovered from. For example, if the lexer finds
///          any invalid tokens, it always throws a {ParseError}, because it cannot
///          proceed beyond invalid tokens.
///
///          The two primary purposes of this class are (1) to let multiple errors be
///          collected if the rest of the compilation unit can be processed despite
///          the other errors (outputting as many errors as possible is always nice,
///          since it means fewer recompilations); (2) to collect warnings, or possibly
///          display them as they are triggered.
public abstract class ErrorManager
{
	/// Summary: Determines whether the error manager currently has any errors.
	public abstract get hasErrors;

	/// Summary: Determines whether the error manager currently has any warnings.
	public abstract get hasWarnings;

	/// Summary: Gets an error or warning message from the specified error
	///          or warning code.
	/// Param errorCode:
	///          An error or warning code. This is usually one of the constants
	////         defined in {ErrorCode}.
	/// Returns: A string containing the error or warning message.
	/// Remarks: The default implementation calls {ErrorCode.getMessage}.
	///          Derived classes should usually only override this method
	///          if it has custom messages, and should delegate to the base
	///          class implementation otherwise.
	public overridable getMessage(errorCode)
	{
		return ErrorCode.getMessage(errorCode);
	}

	/// Summary: Gets an error or warning message from the specified error
	///          or warning code, and formats it with the specified value.
	/// Param errorCode:
	///          An error or warning code. This is usually one of the constants
	////         defined in {ErrorCode}.
	/// Param formatArg:
	///          A List or Hash that is passed directly as the first argument
	///          to {String.format} to format the message.
	/// Returns: A formatted string containing the error or warning message.
	/// Remarks: This method is not overridable, and internally calls the
	///          one-argument overload. To ensure compatibility with this
	///          method in derived classes, always return a string if you
	///          override {getMessage(errorCode)}.
	public getMessage(errorCode, formatArg)
	{
		return getMessage(errorCode).format(formatArg);
	}

	/// Summary: Signals that an error has occurred.
	/// Param error: An {Error} that encapsulates the error. If this is not an
	///              instance of {CompileTimeError}, it will be wrapped in one,
	///              with the error code {ErrorCode.err_Unspecified} and no
	///              source location.
	/// Throws ArgumentError:
	///          {error} is not an {Error}.
	/// Throws ArgumentNullError:
	///          {error} is null.
	public overridable addError(error)
	{
		if error is null:
			throw new ArgumentNullError("error");
		if error is not Error:
			throw new ArgumentError("error must be an instance of aves.Error.", "error");
		if error is not CompileTimeError:
			error = new CompileTimeError(
				null, // No meaningful source location
				ErrorCode.err_Unspecified,
				getMessage(ErrorCode.err_Unspecified),
				error // innerError
			);

		addErrorInner(error);
	}

	/// Summary: Implements the actual error managing behaviour.
	/// Param error: A {CompileTimeError} that encapsulates the error.
	/// Remarks: The public method {addError} only performs argument validation, and
	///          then passes the error directly to this method.
	protected abstract addErrorInner(error);

	/// Summary: Gets a collection of all errors that have occurred so far.
	/// Returns: An {Iterable} containing all errors that have occurred.
	public abstract getAllErrors();

	/// Summary: Removes all errors from the error manager.
	public abstract clearErrors();

	/// Summary: Reports a warning.
	/// Param warning: The {Warning} to report.
	/// Throws ArgumentError:
	///          {warning} is not a {Warning}.
	/// Throws ArgumentNullError:
	///          {warning} is null.
	public overridable addWarning(warning)
	{
		if warning is null:
			throw new ArgumentNullError("warning");
		if warning is not Warning:
			throw new ArgumentError("warning must be an osprey.compiler.Warning.", "warning");

		addWarningInner(warning);
	}

	/// Summary: Implements the actual warning managing behaviour.
	/// Param warning: The {Warning} that was reported.
	/// Remarks: The public method {addWarning} only performs argument validation, and
	///          then passes the warning directly to this method.
	protected abstract addWarningInner(warning);

	/// Summary: Gets a collection of all the warnings that have been reported so far.
	///          Each item in the collection is a {Warning} instance.
	public abstract getAllWarnings();

	/// Summary: Removes all warnings from the error manager.
	public abstract clearWarnings();

	/// Summary: Removes all errors and warnings from the error manager.
	/// Remarks: The default implementation simply called {clearErrors} followed by
	///          {clearWarnings}. When overridden, it may not be necessary to call
	///          the base implementation.
	public overridable clearAll()
	{
		clearErrors();
		clearWarnings();
	}
}
