use namespace aves;
use namespace osprey.compiler.syntax;

namespace osprey.compiler;

/// Summary: Exposes an interface for managing errors that occur during compilation.
///          The {addError} method is used for registering a compile-time error, and
///          no particular behaviour is guaranteed. Specifically, {addError} is NOT
///          guaranteed to throw anything. Instead, it is the caller’s responsibility
///          to decide whether (and if so, how) to continue after adding an error.
///
///          Instances of this class also collect compiler warnings.
///
///          This class is abstract.
/// Remarks: Not all parts of the parser/compiler make use of this class. Some errors
///          are fatal and cannot be recovered from. For example, if the lexer finds
///          any invalid tokens, it always throws a {ParseError}, because it cannot
///          proceed beyond invalid tokens.
///
///          The two primary purposes of this class are (1) to let multiple errors be
///          collected if the rest of the compilation unit can be processed despite
///          the other errors (outputting as many errors as possible is always nice,
///          since it means fewer recompilations); (2) to collect warnings, or possibly
///          display them as they are triggered.
public abstract class ErrorManager
{
	/// Summary: Determines whether the error manager currently has any errors.
	public abstract get hasErrors;

	/// Summary: Determines whether the error manager currently has any warnings.
	public abstract get hasWarnings;

	/// Summary: Gets an error or warning message from the specified error
	///          or warning code.
	/// Param errorCode:
	///          An error or warning code. This is usually one of the constants
	////         defined in {ErrorCode}.
	/// Returns: A string containing the error or warning message.
	/// Remarks: The default implementation calls {ErrorCode.getMessage}.
	///          Derived classes should usually only override this method
	///          if it has custom messages, and should delegate to the base
	///          class implementation otherwise.
	public overridable getMessage(errorCode)
	{
		return ErrorCode.getMessage(errorCode);
	}

	/// Summary: Gets an error or warning message from the specified error
	///          or warning code, and formats it with the specified value.
	/// Param errorCode:
	///          An error or warning code. This is usually one of the constants
	////         defined in {ErrorCode}.
	/// Param formatArg:
	///          A List or Hash that is passed directly as the first argument
	///          to {String.format} to format the message.
	/// Returns: A formatted string containing the error or warning message.
	/// Remarks: This method is not overridable, and internally calls the
	///          one-argument overload. To ensure compatibility with this
	///          method in derived classes, always return a string if you
	///          override {getMessage(errorCode)}.
	public getMessage(errorCode, formatArg)
	{
		return getMessage(errorCode).format(formatArg);
	}

	/// Summary: Signals that an error has occurred.
	/// Param error: A {CompileTimeError} that encapsulates the error, or an error message.
	public overridable addError(error)
	{
		var source = null;
		if error is not CompileTimeError:
			// Error without a source
			error = new CompileTimeError(null, ErrorCode.err_Unspecified, error);
		else:
			source = error.source;

		addErrorInner(source, error);
	}

	/// Summary: Signals that an error has occurred at the specified source.
	/// Param source: A {Syntax} that represents the source of the error, or null.
	/// Param error:  The {CompileTimeError} that occurred, or an error message.
	/// Throws ArgumentError:
	///          {source} is not null and is not a {Syntax}.
	///
	///          {error} is a {CompileTimeError} and its `source` is not the same
	///          reference as {source}.
	public overridable addError(source, error)
	{
		if source is not null and source is not Syntax:
			throw new ArgumentError("source must be null or an osprey.compiler.syntax.Syntax.",
				"source");

		if error.source not refeq source:
			throw new ArgumentError("error’s source must be the same reference as the source parameter.",
				"error");

		addErrorInner(source, error);
	}

	/// Summary: Implements the actual error managing behaviour.
	/// Param source: A {Syntax} that is the source of the error, which may be null.
	/// Param error:  A {CompileTimeError} that encapsulates the error.
	protected abstract addErrorInner(source, error);

	/// Summary: Gets a collection of all errors that have occurred so far. This
	///          method may return null if there are no errors.
	/// Returns: A collection of all errors that have occurred, or null if there
	///          are none.
	public abstract getAllErrors();

	/// Summary: Removes all errors from the error manager.
	public abstract clearErrors();

	/// Summary: Adds a warning with the specified source and error code.
	/// Param source:    A {Syntax} that is the source of the warning, or null.
	/// Param errorCode: The error code of the warning, corresponding to one of the
	///                  {ErrorCode} constants.
	public overridable addWarning(source, errorCode)
	{
		addWarningInner(new Warning(source, errorCode, ErrorCode.getMessage(errorCode)));
	}
	/// Summary: Adds a warning with the specified source, error code and message.
	/// Param source:    A {Syntax} that is the source of the warning, or null.
	/// Param errorCode: The error code of the warning, corresponding to one of the
	///                  {ErrorCode} constants.
	/// Param message:   The warning message.
	/// Throws ArgumentError:
	///          {source} is not null and is not a {Syntax}.
	public overridable addWarning(source, errorCode, message)
	{
		if message is null:
			message = ErrorCode.getMessage(errorCode);
		addWarningInner(new Warning(source, errorCode, message));
	}
	/// Summary: Adds a warning with the specified source, error code and message,
	///          which is formatted with the specified format argument.
	/// Param source:    A {Syntax} that is the source of the warning, or null.
	/// Param errorCode: The error code of the warning, corresponding to one of the
	///                  {ErrorCode} constants.
	/// Param message:   The warning message.
	/// Param formatArg:
	///               An argument that is passed to {String.format}, with the
	///               warning message being the format string. (List or Hash)
	/// Throws ArgumentError:
	///          {source} is not null and is not a {Syntax}.
	public overridable addWarning(source, errorCode, message, formatArg)
	{
		if message is null:
			message = ErrorCode.getMessage(errorCode, formatArg);
		addWarningInner(new Warning(source, errorCode, message));
	}

	/// Summary: Implements the actual warning managing behaviour.
	/// Param warning: The {Warning} that was reported.
	protected abstract addWarningInner(warning);

	/// Summary: Gets a collection of all the warnings that have been reported so far.
	///          Each item in the collection is a {Warning} instance.
	public abstract getAllWarnings();

	/// Summary: Removes all warnings from the error manager.
	public abstract clearWarnings();

	/// Summary: Removes all errors and warnings from the error manager.
	/// Remarks: The default implementation simply called {clearErrors} followed by
	///          {clearWarnings}. When overridden, it may not be necessary to call
	///          the base implementation.
	public overridable clearAll()
	{
		clearErrors();
		clearWarnings();
	}
}

/// Summary: Represents a single compiler warning.
public class Warning
{
	/// Summary: Creates a new {Warning} with the specified source and message.
	/// Param source:    A {Syntax} that is the source of the warning, or null.
	/// Param errorCode: The error code of the warning, corresponding to one of the
	///                  {ErrorCode} constants.
	/// Param message:   The warning message.
	/// Throws ArgumentError:
	///          {source} is not null and is not a {Syntax}.
	/// Throws TypeError:
	///          {message} could not be converted to a string.
	public new(source, errorCode, message)
	{
		if source is not null and source is not Syntax:
			throw new ArgumentError("source must be null or an osprey.compiler.syntax.Syntax.",
				"source");
		errorCode = int(errorCode);
		message = string(message);

		this._source    = source;
		this._errorCode = errorCode;
		this._message   = message;
	}

	private _source;
	/// Summary: Gets a {Syntax} that is the source of the warning, or null.
	public get source = _source;

	private _errorCode;
	/// Summary: Gets the error code associated with the warning. This corresponds
	///          to one of the {ErrorCode} constants.
	public get errorCode = _errorCode;

	private _message;
	/// Summary: Gets a string containing the warning message.
	public get message = _message;

	override toString()
	{
		if source
		{
			var column;
			var line = source.getLineNumber(1, ref column);
			return "Warning in {0} (ln {1}, col {2}): {3}"
				.format([source.sourceFile.fileName, line, column, message]);
		}
		return "Warning: " :: message;
	}
}
