use namespace aves;
use namespace osprey.compiler.syntax;

namespace osprey.compiler.parser;

/// Summary: Represents an error that occurs during parsing.
public inheritable ParseError is CompileTimeError
{
	/// Summary: Creates a new {ParseError} with the specified source and error
	///          code.
	/// Param source: The {Syntax} or {SourceLocation} that caused the error, or
	///               null if there is no meaningful error source.
	/// Param errorCode: The error code associated with the error. (Int, UInt or Real)
	/// Throws ArgumentError:
	///          {source} is not null and is not a {Syntax} or {SourceLocation}.
	/// Throws TypeError:
	///          {errorCode} could not be converted to an Int.
	public new(source, errorCode)
	{
		new this(source, errorCode, defaultMessage, null);
	}
	/// Summary: Creates a new {ParseError} with the specified source, error code
	///          and message.
	/// Param source: The {Syntax} or {SourceLocation} that caused the error, or
	///               null if there is no meaningful error source.
	/// Param errorCode: The error code associated with the error. (Int, UInt or Real)
	/// Param message: The error message.
	/// Throws ArgumentError:
	///          {source} is not null and is not a {Syntax} or {SourceLocation}.
	/// Throws TypeError:
	///          {errorCode} could not be converted to an Int.
	public new(source, errorCode, message)
	{
		new this(source, errorCode, message ?? defaultMessage, null);
	}
	/// Summary: Creatse a new {ParseError} with the specified source, error code,
	///          message and inner error.
	/// Param source: The {Syntax} or {SourceLocation} that caused the error, or
	///               null if there is no meaningful error source.
	/// Param errorCode: The error code associated with the error. (Int, UInt or Real)
	/// Param message: The error message.
	/// Param innerError: The {Error} that caused this error.
	/// Throws ArgumentError:
	///          {source} is not null and is not a {Syntax} or {SourceLocation}.
	/// Throws TypeError:
	///          {errorCode} could not be converted to an Int.
	public new(source, errorCode, message, innerError)
	{
		new base(source, errorCode, message ?? defaultMessage, innerError);
	}

	private static get defaultMessage =
		ErrorCode.getMessage(ErrorCode.err_Syntax);
}

/// Summary: Represents an error that occurs when an unexpected token is encountered.
///          This indicates that the code is syntactically invalid.
public inheritable UnexpectedTokenError is ParseError
{
	/// Summary: Creates a new {UnexpectedTokenError} with the specified error code,
	///          actual token and expected token type. The actual token is used as
	///          the source of the error.
	/// Param errorCode: The error code associated with the error. (Int, UInt or Real)
	/// Param actualToken: The {Token} that caused the error.
	/// Param expectedType: The {TokenType} that the parser expected.
	public new(errorCode, actualToken, expectedType)
	{
		new this(errorCode, actualToken, expectedType, defaultMessage, null);
	}
	/// Summary: Creates a new {UnexpectedTokenError} with the specified error code,
	///          actual token, expected token type and message. The actual token is
	///          used as the source of the error.
	/// Param errorCode: The error code associated with the error. (Int, UInt or Real)
	/// Param actualToken: The {Token} that caused the error.
	/// Param expectedType: The {TokenType} that the parser expected.
	/// Param message: The error message.
	public new(errorCode, actualToken, expectedType, message)
	{
		new this(errorCode, actualToken, expectedType, message ?? defaultMessage, null);
	}
	/// Summary: Creates a new {UnexpectedTokenError} with the specified error code,
	///          actual token, expected token type, message and inner error. The actual
	///          token is used as the source of the error.
	/// Param errorCode: The error code associated with the error. (Int, UInt or Real)
	/// Param actualToken: The {Token} that caused the error.
	/// Param expectedType: The {TokenType} that the parser expected.
	/// Param message: The error message.
	/// Param innerError: The {Error} that caused this error.
	public new(errorCode, actualToken, expectedType, message, innerError)
	{
		new base(actualToken, errorCode, message ?? defaultMessage, innerError);

		this._actualToken = actualToken;
		this._expectedType = expectedType;
	}

	private _actualToken;
	/// Summary: Gets the {Token} that was encountered in the token stream.
	public get actualToken = _actualToken;

	private _expectedType;
	/// Summary: Gets the {TokenType} that was expected.
	public get expectedType = _expectedType;

	overridable override get message
	{
		return base.message :: getExpectation(actualToken, expectedType);
	}

	private static get defaultMessage =
		ErrorCode.getMessage(ErrorCode.err_UnexpectedToken);

	private static getExpectation(actualToken, expectedType)
	{
		return " (expected {0}, got {1})".format([tokenTypeToString(expectedType), actualToken]);
	}

	private static tokenTypeToString(type)
	{
		var str;
		if specialTypeToString.tryGet(type, ref str):
			return str;
		if str = Lexer.getKeywordFromTokenType(type):
			return "keyword '{0}'".format([type]);
		if typeToPunctuation.tryGet(type, ref str):
			return "'" :: str :: "'";
		return "'" :: type :: "'";
	}

	private static typeToPunctuation = {
		TokenType.curlyOpen:        "{",
		TokenType.curlyClose:       "}",
		TokenType.squareOpen:       "[",
		TokenType.squareClose:      "]",
		TokenType.parenOpen:        "(",
		TokenType.parenClose:       ")",
		TokenType.dot:              ".",
		TokenType.comma:            ",",
		TokenType.colon:            ":",
		TokenType.semicolon:        ";",
		TokenType.tilde:            "~",
		TokenType.less:             "<",
		TokenType.lessEqual:        "<=",
		TokenType.greater:          ">",
		TokenType.greaterEqual:     ">=",
		TokenType.doubleEqual:      "==",
		TokenType.notEqual:         "!=",
		TokenType.question:         "?",
		TokenType.nullCoalescing:   "??",
		TokenType.nullOr:           "?!",
		TokenType.funcApplication:  "->",
		TokenType.plus:             "+",
		TokenType.minus:            "-",
		TokenType.pipe:             "|",
		TokenType.multiply:         "*",
		TokenType.divide:           "/",
		TokenType.modulo:           "%",
		TokenType.ampersand:        "&",
		TokenType.caret:            "^",
		TokenType.concatenate:      "::",
		TokenType.shiftLeft:        "<<",
		TokenType.shiftRight:       ">>",
		TokenType.power:            "**",
		TokenType.hash:             "#",
		TokenType.dollar:           "$",
		TokenType.assign:           "=",
		TokenType.plusAssign:       "+=",
		TokenType.minusAssign:      "-=",
		TokenType.pipeAssign:       "|=",
		TokenType.mulAssign:        "*=",
		TokenType.divAssign:        "/=",
		TokenType.modAssign:        "%=",
		TokenType.ampAssign:        "&=",
		TokenType.caretAssign:      "^=",
		TokenType.concatAssign:     "::=",
		TokenType.shiftLeftAssign:  "<<=",
		TokenType.shiftRightAssign: ">>=",
		TokenType.powerAssign:      "**=",
		TokenType.hashAssign:       "#=",
		TokenType.dollarAssign:     "$=",
		TokenType.at:               "@",
		TokenType.splat:            "...",
		TokenType.safeAccess:       "?.",
		TokenType.parenOpenSafe:    "?(",
		TokenType.squareOpenSafe:   "?[",
		TokenType.compare:          "<=>",
	};

	private static specialTypeToString = {
		TokenType.eof:    "end-of-file",
		TokenType.int:    "integer literal",
		TokenType.real:   "real literal",
		TokenType.string: "string literal",
		TokenType.char:   "character literal",
	};
}
