0000 unspecified = "Unspecified compile-time error.";

//## Parse errors (1000-1999) ##

1000 syntax = "Syntax error.";
1001 invalidCharacter = "Invalid character: '{0}' (U+{1}).";

// Comment errors (1100-1199)
1101 delimitedCommentNotTerminated = "Unable to locate end of delimited comment.";

// Numeric literal errors (1200-1299)
1201 underscoreWithoutDigits = "Underscore ('_') must be followed by one or more digits.";
1202 multipleDecimalPoints = "A floating-point literal may only have one decimal point.";
1203 exponentialPartBeforeDecimalPoint = "An exponential part is not allowed without a preceding decimal point. In other words, a number like 10e9 is not allowed; use 10.0e9 instead.";
1204 multipleExponentialParts = "More than one exponential part in numeric literal";
1205 invalidExponentialPart = "Invalid exponential part. An e or E in a numeric literal is followed by an optional sign (+ or -) and one or more digits.";
1206 underscoreAfterDecimalPoint = "Underscore ('_') is not allowed after the decimal point.";
1207 multipleConsecutiveUnderscores = "Multiple consecutive underscores ('_') are not allowed.";
1208 multiplierOnReal = "Floating-point literals cannot have a multiplier (k, G, M, T).";
1209 unsignedOnReal = "Floating-point literals cannot have an unsigned suffix (u or U).";
1210 numberOutOfRange = "Numeric literal '{1}' is outside the range of {0}.";
1211 hexNumberWithoutDigits = "Hex specifier (0x or 0X) without hexadecimal digits.";

// String literal errors (1300-1399)
1301 newlineInString = "Newline in string literal.";
1302 stringNotTerminated = "Could not find the end of the string literal.";

// Character literal errors (1400-1499)
1401 newlineInCharLiteral = "Newline in character literal.";
1402 emptyCharLiteral = "Empty character literal is not allowed.";
1403 charLiteralNotTerminated = "Could not find the end of the character literal.";
1404 charLiteralTooLong = "All character literals must contain exactly one Unicode code point.";

// Escape sequence errors (1500-1599)
1501 missingEscapeSequence = "Expected escape sequence after backslash.";
1502 invalidEscapeSequence = "Invalid or unrecognised escape sequence.";
1503 invalidUnicodeEscapeSequence = "Malformed Unicode escape sequence: expected '{', followed by one or more hexadecimal digits, followed by '}'.";
1504 unicodeEscapeOutOfRange = "The Unicode code point must be between U+0000 and U+10FFFF.";

// Syntax errors (1600–1999)
// (excluding syntax, which is 1000)
1601 unexpectedToken = "Unexpected token.";

// Modifier errors
1610 duplicateModifier = "The modifier '{0}' occurs more than once.";
1611 multipleAccessibilityModifiers = "The member has more than one accessibility modifier.";
1612 invalidModifierForGlobalFunctionOrConstant = "Global functions and global constants only accept the 'public' and 'private' modifiers.";
1613 invalidModifierForConstructor = "An instance constructor cannot be marked 'abstract', 'inheritable', 'overridable' or 'override'.";
1614 invalidModifierForStaticConstructor = "A static constructor cannot be marked 'public', 'protected', 'private', 'abstract', 'inheritable', 'overridable' or 'override'.";
1615 invalidModifierForField = "A field cannot be marked 'abstract', 'inheritable', 'overridable' or 'override'.";
1616 invalidModifierForStaticMethod = "A static method cannot be marked 'abstract', 'inheritable', 'overridable' or 'override'.";
1617 methodCannotBeInheritable = "A method cannot be marked 'inheritable'.";
1618 abstractMethodCannotBeOverridable =  "An abstract method cannot be marked 'overridable'.";
1619 invocatorCannotBeStatic = "An invocator ('this' method) cannot be marked 'static'.";
1620 invalidModifierForStaticProperty = "A static property accessor cannot be marked 'abstract', 'inheritable', 'overridable' or 'override'.";
1621 propertyCannotBeInheritable = "A property or indexer accessor cannot be marked 'inheritable'.";
1622 abstractPropertyCannotBeOverridable = "An abstract property or indexer accessor cannot be marked 'overridable'.";
1623 indexerCannotBeStatic = "An indexer accessor cannot be marked 'static'.";
1624 invalidModifierForClassConstant = "A class constant cannot be marked 'static', 'abstract', 'inheritable', 'overridable' or 'override'.";
1625 invalidModifierForOperator = "An operator override declaration does not accept any modifiers.";
1626 invalidModifierForIterator = "An iterator declaration does not accept any modifiers.";

// Namespace declaration errors
1631 expectedNamespaceMember = "Expected a declaration of a class, enum, namespace, global function or global constant.";
1632 invalidNamespaceModifiers = "Namespace declarations do not accept any modifiers.";
1633 invalidLocationForFileNamespace = "The file namespace declaration ('namespace …;') must be the first namespace declaration in the file.";

// Type declaration errors
1641 invalidModifierForClass = "A class declaration cannot be marked 'protected', 'private', 'overridable' or 'override'.";
1642 invalidModifierForEnum = "An enum declaration cannot be marked 'protected', 'private', 'inheritable', 'abstract', 'static', 'overridable' or 'override'.";
1643 staticClassCannotBeAbstractOrInheritable = "A static class declaration cannot be marked 'abstract' or 'inheritable'.";
1644 classCannotBeBothAbstractAndInheritable = "A class declaration cannot be marked both 'abstract' and 'inheritable'.";

// Property and indexer declaration errors
1651 indexerCannotHaveOptionalParameters = "An indexer accessor cannot have optional parameters.";
1652 indexerCannotHaveVariadicParameter = "An indexer accessor cannot have a variadic parameter.";
1653 indexerCannotHaveRefParameters = "An indexer accessor cannot have pass-by-reference parameters.";
1654 nonAbstractPropertyCannotHaveEmptyBody = "A non-abstract property or indexer accessor cannot have an empty body.";
1655 abstractPropertyMustHaveEmptyBody = "An abstract property or indexer accessor must have an empty body.";

// Method declaration errors
1661 nonAbstractMethodCannotHaveEmptyBody = "A non-abstract method cannot have an empty body.";
1662 abstractMethodMustHaveEmptyBody = "An abstract method must have an empty body.";

// Operator declaration errors
1671 operatorCannotHaveOptionalParameters = "An operator declaration cannot have optional parameters.";
1672 operatorCannotHaveVariadicParameter = "An operator declaration cannot have a variadic parameter";
1673 operatorCannotHaveRefParameters = "An operator declaration cannot have pass-by-reference parameters.";
1674 wrongParameterCountForUnaryOperator = "Wrong parameter count for unary operator overload (expected 1, got {0}).";
1675 wrongParameterCountForBinaryOperator = "Wrong parameter count for binary operator overload (expected 2, got {0}).";
1676 wrongParameterCountForUnaryOrBinaryOperator = "Wrong parameter count for operator overload (expected 1 or 2, got {0}).";

// Use directive errors
1681 invalidUseDirective = "Expected an identifier (for 'use x;', 'use x.*' or 'use x.{...};') or string literal (for 'use \"file.osp\";').";
1682 invalidUseMemberDirective = "Expected a dot (for 'use x.*;' or 'use x.{...};') or keyword 'as' (for 'use x as y;').";
1683 invalidUseMemberDirectiveAfterDot = "Expected an asterisk (for 'use x.*;') or curly brace (for 'use x.{...};') after dot.";

// Parameter list errors
1701 variadicParameterCannotBeOptional = "A variadic parameter cannot be optional.";
1702 variadicMustBeLastParameter = "A variadic parameter must be the last declared parameter.";
1703 cannotMixVariadicAndOptionalParameters = "Cannot mix variadic and optional parameters in the same parameter list.";
1704 requiredParameterAfterOptional = "All required parameters must come before all optional parameters.";
1705 cannotPassVariadicByRef = "A variadic parameter cannot be passed by reference.";
1706 cannotPassOptionalByRef = "A pass-by-reference parameter cannot be optional.";
1707 multipleVariadicParameters = "A parameter list can contain at most one variadic parameter.";
1708 cannotPassThisParameterByRef = "A 'this' parameter cannot be passed by reference.";
1709 expectedParameter = "Expected a parameter declaration. An empty parameter list is not permitted in this context.";

// Argument list errors
1721 expectedArgument = "Expected an argument. An empty argument list is not permitted in this context.";
1722 refArgumentNotAllowed = "Pass-by-reference arguments are not permitted in this context.";
1723 positionalAnnotationArgumentMustComeBeforeNamed = "All positional arguments must come before all named arguments.";

// Statement errors
1801 expectedLoopAfterLabel = "Expected an iteration statement ('for', 'while', 'do' or 'do–while') after loop label.";
1802 expectedJumpStatement = "Expected a jump statement ('return', 'yield', 'next', 'break' or 'throw').";
1803 specificCatchClauseAfterGeneric = "All specific 'catch' clauses must come before the generic 'catch' clause.";
1804 multipleGenericCatchClauses = "A 'try' statement can only have one generic 'catch' clause.";
1805 tryStatementMustHaveCatchOrFinally = "A 'try' statement must have at least one 'catch' clause or a 'finally' clause.";
1806 expectedParallelAssignment = "Expected a parallel assignment. Use ';' if the intent was to separate statements.";
1807 parallelAssignmentWrongValueCount = "A parallel assignment must have one value or as many values as there are targets (expected {0}, got {1}).";
1808 expectedStatementTerminator = "Expected a semicolon (';') at the end of the statement.";
1809 constantWithoutValue = "Expected '=' followed by a constant value. A constant cannot be declared without a value.";
1811 withStatementVariableWithoutValue = "Expected '=' followed by an expression. A 'with' statement variable must be assigned a value.";
1812 invalidElseClause = "The body of an 'else' clause must be a block or an 'if' statement.";

// Expression errors
1851 expectedPrimaryExpression = "Expected an expression; got {0}.";
1852 invalidStatementExpression = "Only invocation, function application, assignment and object creation can be used as a statement.";
1853 expressionMustBeAssignable = "The target of an assignment must be an assignable expression.";
1854 expectedMemberToAccess = "Expected the name of a member (an identifier) or 'iter'.";
1855 expectedConstructorArgumentsOrInitializer = "Expected an argument list ('new T(…)') or initializer ('new T with …').";
1856 invalidLambdaExpression = "Expected a parameter list, a single identifier, '.' or '?.' followed by an identifier, '=>', '{', or an operator.";
1857 letInVariableWithoutValue = "Expected '=' followed by an expression. A 'let–in' variable must be assigned a value.";

// Extension errors
1901 expectedExternKeyword = "Expected the '__extern' keyword.";
1902 unknownExternParameter = "Unknown __extern parameter '{0}'.";
1903 expectedExternMethodName = "Expected a string (the name of a native method name).";
1904 unknownNamedConstant = "There is no named constant matching '{0}: {1}'.";

//## Compile-time errors (2000-5999) ##
2001 nameError = "The name '{0}' caused an unspecified error.";
2002 nameErrorWithoutName = "Unspecified name error.";
2003 undefinedName = "The name '{0}' does not exist in this context.";
2004 undefinedNameWithoutName = "An unspecified name does not exist in this context.";
2005 duplicateName = "The name '{0}' already exists in this context.";
2006 duplicateNameWithoutName = "An unspecified name already exists in this context.";

// Codes 6000-6999 are used for warnings.
6001 unreachableCode = "Unreachable code detected.";
6002 unusedVariable = "The variable '{0}' is declared, but never used.";
6003 variableAssignedButUnused = "The variable '{0}' is assigned, but its value is never used.";
6004 variableUsedButUnassigned = "The variable '{0}' is never assigned to and will always have the default value null.";

// Everything else, you can use for your own purposes!
