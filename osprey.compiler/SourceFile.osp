use aves;
use io;

namespace osprey.compiler;

public class SourceFile
{
	private new(this._fileName, this._source, this._hash);

	private _fileName;
	/// Summary: Gets the name of the file that the {SourceFile} was opened from.
	public get fileName = _fileName;

	private _source;
	/// Summary: Gets the text contents of the file.
	public get source = _source;

	private _hash;
	/// Summary: Gets a {Buffer} containing the SHA-1 hash of the file’s bytes, or null if
	///          the program is being compiled without debug symbols.
	public get hash = _hash;

	// Known lines in the source file, as a list of `LineInfo` instances.
	private lines = [];

	private getNearestLine(sourceIndex)
	{
		var lineCount = lines.length;
		var iMin = 0, iMax = lineCount - 1;

		while iMax >= iMin
		{
			var iMid = (iMin + iMax) / 2;
			var line = lines[iMid];

			if sourceIndex < line.startIndex
			{
				// Search the lower half
				iMax = iMid - 1;
			}
			else if sourceIndex >= line.endIndex
			{
				if iMid == lineCount:
					// The nearest line is the last; return it.
					// When getLineNumber walks the source from
					// this location, it will add lines to the
					// cache as it encounters their ends.
					return line;

				// Otherwise, the nearest line may still be in
				// the cache somewhere, so search the upper half
				iMin = iMid + 1;
			}
			else
			{
				return line;
			}
		}

		// Line numbers start at 1!
		return new LineInfo with { lineNumber: 1 };
	}

	private appendLineInfo(lineNumber, startIndex, endIndex)
	{
		var lineCount = lines.length;
		if lineCount > 0
		{
			var lastLine = lines.last();
			if lineNumber <= lastLine.lineNumber:
				return; // The line is already in the cache

			if lineNumber != lastLine.lineNumber + 1:
				throw new ArgumentRangeError(
					"lineNumber",
					"Lines must be added consecutively (got {0}, expected {1})."
						.format([lineNumber, lastLine.lineNumber + 1])
				);

			// The last line might be a partial; update its range
			// to run up to the startIndex of the next line, i.e.
			// the line we're adding
			lastLine.endIndex = startIndex;
		}
		else
		{
			if lineNumber != 1 or startIndex != 0:
				throw new ArgumentRangeError(
					null,
					"The first line must be numbered 1 and start at index 0."
				);
		}

		lines.add(new LineInfo with
		{
			lineNumber: lineNumber,
			startIndex: startIndex,
			endIndex:   endIndex,
		});
	}

	/// Summary: Finds the line number corresponding to the specified source index.
	/// Param index: The index of the character whose line number to find.
	/// Returns: The 1-based line number of the specified index within the file source.
	public getLineNumber(index)
	{
		var column;
		return getLineNumber(index, 1, ref column);
	}
	/// Summary: Finds the line number and column corresponding to the specified
	///          source index.
	/// Param index:   The index of the character whose line and column to find.
	/// Param tabSize: The size of a tab character (`'\t'`), in number of characters.
	///                This is used when calculating the column number.
	/// Param column:  (ref) Receives the 1-based column number of the syntax element.
	/// Returns: The 1-based line number of the specified index within the file source.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than the length of {source}.
	///
	///          {tabSize} is less than zero.
	public getLineNumber(index, tabSize, ref column)
	{
		index = int(index);
		if index < 0 or index >= source.length:
			throw new ArgumentRangeError("index");
		tabSize = int(tabSize);
		if tabSize <= 0:
			throw new ArgumentRangeError("tabSize");

		var nearestLine = getNearestLine(index);

		var line = nearestLine.lineNumber;
		var col = 0;

		var curLineStart = nearestLine.startIndex;
		var i = curLineStart;
		while i < index
		{
			const newlines = "\r\n\u0085\u2028\u2029";

			var ch = source[i];
			i += 1;
			if newlines.contains(ch)
			{
				// \r\n counts as a single unit
				if i < source.length and ch == '\r' and source[i] == '\n':
					i += 1;

				// Add the last line to the cache
				appendLineInfo(line, curLineStart, i);

				col = 0;
				line += 1;
				curLineStart = i;
			}
			else if ch == '\t'
			{
				col += tabSize - col % tabSize;
			}
			else
			{
				col += 1;
			}
		}

		// Append the current line, even if it's partial.
		// We'll expand it later if we ever look past it.
		appendLineInfo(line, curLineStart, index);

		column = col + 1;
		return line;
	}

	/// Summary: Opens the specified source file, without computing the SHA-1 hash of
	///          the file’s bytes.
	/// Param fileName: The name of the file to open.
	/// Returns: A new {SourceFile} that represents the opened file.
	public static open(fileName)
	{
		return open(fileName, false);
	}
	/// Summary: Opens the specified source file, optionally computing the SHA-1 hash of
	///          the file’s bytes as well.
	/// Param fileName: The name of the file to open.
	/// Param computeHash: True to also compute a SHA-1 hash of the file’s bytes.
	/// Returns: A new {SourceFile} that represents the opened file.
	public static open(fileName, computeHash)
	{
		fileName = string(fileName);

		var hash = null;

		var fileText;
		if computeHash
		{
			with fs = File.openRead(fileName)
			{
				if not fs.canSeek:
					throw new IOError("The source file '{0}' must be seekable.".format([fileName]));

				// TODO: SourceFile.open(fileName, true)
				throw new NotImplementedError("File hashing is not yet supported.");
			}
		}
		else
		{
			fileText = File.readAllText(fileName);
		}

		return new SourceFile(fileName, fileText, hash);
	}

	/// Summary: Creates a new {SourceFile} that represents an anonymous file. The name
	///          of the file will be `<anonymous>`. The file will not have its contents
	///          hashed.
	/// Param source: The text contents of the file.
	/// Returns: A new {SourceFile} that contains the specified text.
	public static createAnon(source)
	{
		return new SourceFile(anonName, string(source), null);
	}
	/// Summary: Creates a new {SourceFile} that represents an anonymous file with the
	///          specified name. The file will not have its contents hashed.
	/// Param source: The text contents of the file.
	/// Param fileName: The name of the anonymous file.
	/// Returns: A new {SourceFile} that contains the specified text.
	public static createAnon(source, fileName)
	{
		return new SourceFile(string(fileName), string(source), null);
	}

	private static anonName = "<anonymous>";
}

private class LineInfo
{
	public lineNumber = 1;
	public startIndex = 0;
	public endIndex   = 0;
}
