use aves.*;

namespace osprey.compiler.parser;

public enum set TokenType
{
	/// Summary: The token is invalid or unknown (synonymous with {none}).
	invalid = 0,
	/// Summary: The token is invalid or unknown (synonymous with {invalid}).
	none = 0,
	/// Summary: The end of the file.
	eof = 1,

	/// Summary: A mask for extracting the category of a {TokenType}.
	categoryMask = 0x7fff0000,
	/// Summary: A mask for extracting the value of a {TokenType}.
	valueMask = 0x0000ffff,

	/** Categories **/

	/// Summary: The token is an identifier.
	identifierCategory = 0x00010000,
	/// Summary: The token is a keyword.
	keyword = 0x00020000,
	/// Summary: The token is a literal value.
	literal = 0x00040000,
	/// Summary: The token is a punctuation token.
	punctuation = 0x00080000,
	/// Summary: A comment.
	comment = 0x00100000,
	/// Summary: The token is a compound assignment operator.
	compoundAssign = 0x00200000,
	/// Summary: The token is a member modifier, such as public, protected, static, overridable, etc.
	memberModifier = 0x00400000,
	/// Summary: The token is an overloadable binary operator.
	overloadableBinaryOperator = 0x00800000,
	/// Summary: The token matches the lambda-operator production (it can immediately follow an `@`).
	lambdaOperator = 0x01000000,

	/// Summary: A single identifier.
	identifier = identifierCategory | 1,

	/** Keywords **/

	/// Summary: abstract
	\abstract = 1 | keyword | memberModifier,
	/// Summary: and
	\and = 2 | keyword | lambdaOperator,
	/// Summary: async (unused)
	\async = 3 | keyword,
	/// Summary: base
	\base = 4 | keyword,
	/// Summary: break
	\break = 5 | keyword,
	/// Summary: catch
	\catch = 6 | keyword,
	/// Summary: class
	\class = 7 | keyword,
	/// Summary: const
	\const = 8 | keyword,
	/// Summary: do
	\do = 9 | keyword,
	/// Summary: else
	\else = 10 | keyword,
	/// Summary: enum
	\enum = 11 | keyword,
	/// Summary: false
	\false = 12 | keyword | literal,
	/// Summary: finally
	\finally = 13 | keyword,
	/// Summary: for
	\for = 14 | keyword,
	/// Summary: function
	\function = 15 | keyword,
	/// Summary: global
	\global = 16 | keyword,
	/// Summary: if
	\if = 17 | keyword,
	/// Summary: in
	\in = 18 | keyword,
	/// Summary: inheritable
	\inheritable = 19 | keyword | memberModifier,
	/// Summary: internal
	\internal = 20 | keyword | memberModifier,
	/// Summary: is
	\is = 21 | keyword,
	/// Summary: iter
	\iter = 22 | keyword,
	/// Summary: let
	\let = 23 | keyword,
	/// Summary: namespace
	\namespace = 24 | keyword,
	/// Summary: new
	\new = 25 | keyword,
	/// Summary: next
	\next = 26 | keyword,
	/// Summary: not
	\not = 27 | keyword | lambdaOperator,
	/// Summary: null
	\null = 28 | keyword | literal,
	/// Summary: operator
	\operator = 29 | keyword,
	/// Summary: or
	\or = 30 | keyword | lambdaOperator,
	/// Summary: overridable
	\overridable = 31 | keyword | memberModifier,
	/// Summary: override
	\override = 32 | keyword | memberModifier,
	/// Summary: private
	\private = 33 | keyword | memberModifier,
	/// Summary: protected
	\protected = 34 | keyword | memberModifier,
	/// Summary: public
	\public = 35 | keyword | memberModifier,
	/// Summary: ref
	\ref = 36 | keyword,
	/// Summary: refeq
	\refeq = 37 | keyword,
	/// Summary: return
	\return = 38 | keyword,
	/// Summary: static
	\static = 39 | keyword | memberModifier,
	/// Summary: this
	\this = 40 | keyword,
	/// Summary: throw
	\throw = 41 | keyword,
	/// Summary: true
	\true = 42 | keyword | literal,
	/// Summary: try
	\try = 43 | keyword,
	/// Summary: typeof
	\typeof = 44 | keyword,
	/// Summary: use
	\use = 45 | keyword,
	/// Summary: var
	\var = 46 | keyword,
	/// Summary: with
	\with = 47 | keyword,
	/// Summary: while
	\while = 48 | keyword,
	/// Summary: xor
	\xor = 49 | keyword | lambdaOperator,
	/// Summary: yield
	\yield = 50 | keyword,

	/** Literals **/

	/// Summary: An integer literal (signed or unsigned).
	/// Remarks: We make no distinction here between signed or unsigned literals,
	///          because several parts of the grammar allow both kinds of integer
	///          literals, so separating the two would increase the complexity in
	///          places. When a distiction is needed, the `is` operator can be used
	///          on the `literalValue` of the token. When conversion is needed,
	///          the {int} and {uint} functions are employed.
	int = 1 | literal,
	/// Summary: A real (floating-point) literal.
	real = 2 | literal,
	/// Summary: A string literal.
	string = 3 | literal,
	/// Summary: A character literal.
	char = 4 | literal,

	/** Punctuation **/

	/// Summary: {
	curlyOpen = 1 | punctuation,
	/// Summary: }
	curlyClose = 2 | punctuation,
	/// Summary: [
	squareOpen = 3 | punctuation,
	/// Summary: ]
	squareClose = 4 | punctuation,
	/// Summary: (
	parenOpen = 5 | punctuation,
	/// Summary: )
	parenClose = 6 | punctuation,
	/// Summary: .
	dot = 7 | punctuation,
	/// Summary: ,
	comma = 8 | punctuation,
	/// Summary: :
	colon = 9 | punctuation,
	/// Summary: ;
	semicolon = 10 | punctuation,
	/// Summary: ~
	tilde = 11 | punctuation | lambdaOperator,
	/// Summary: <
	less = 12 | punctuation | lambdaOperator,
	/// Summary: <=
	lessEqual = 13 | punctuation | lambdaOperator,
	/// Summary: >
	greater = 14 | punctuation | lambdaOperator,
	/// Summary: >=
	greaterEqual = 15 | punctuation | lambdaOperator,
	/// Summary: ==
	doubleEqual = 16 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: !=
	notEqual = 17 | punctuation | lambdaOperator,
	/// Summary: ?
	question = 18 | punctuation,
	/// Summary: ??
	nullCoalescing = 19 | punctuation,
	/// Summary: ?!
	nullOr = 20 | punctuation,
	/// Summary: ->
	funcApplication = 21 | punctuation | lambdaOperator,
	/// Summary: +
	plus = 22 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: -
	minus = 23 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: |
	pipe = 24 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: *
	multiply = 25 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: /
	divide = 26 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: %
	modulo = 27 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: &
	ampersand = 28 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: ^
	caret = 29 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: ::
	concatenate = 30 | punctuation | lambdaOperator,
	/// Summary: <<
	shiftLeft = 31 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: >>
	shiftRight = 32 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: **
	power = 33 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: =
	assign = 34 | punctuation,
	/// Summary: +=
	plusAssign = 35 | punctuation | compoundAssign,
	/// Summary: -=
	minusAssign = 36 | punctuation | compoundAssign,
	/// Summary: |=
	pipeAssign = 37 | punctuation | compoundAssign,
	/// Summary: *=
	mulAssign = 38 | punctuation | compoundAssign,
	/// Summary: /=
	divAssign = 39 | punctuation | compoundAssign,
	/// Summary: %=
	modAssign = 40 | punctuation | compoundAssign,
	/// Summary: &=
	ampAssign = 41 | punctuation | compoundAssign,
	/// Summary: ^=
	caretAssign = 42 | punctuation | compoundAssign,
	/// Summary: ::=
	concatAssign = 43 | punctuation | compoundAssign,
	/// Summary: <<=
	shiftLeftAssign = 44 | punctuation | compoundAssign,
	/// Summary: >>=
	shiftRightAssign = 45 | punctuation | compoundAssign,
	/// Summary: **=
	powerAssign = 46 | punctuation | compoundAssign,
	/// Summary: @
	at = 47 | punctuation,
	/// Summary: ...
	splat = 48 | punctuation,
	/// Summary: ?.
	safeAccess = 49 | punctuation,
	/// Summary: <=>
	compare = 50 | punctuation | overloadableBinaryOperator | lambdaOperator,
	/// Summary: ?(
	parenOpenSafe = 51 | punctuation,
	/// Summary: ?[
	squareOpenSafe = 52 | punctuation,
	/// Summary: !
	exclam = 53 | punctuation,
	/// Summary: =>
	fatArrow = 54 | punctuation,
}
