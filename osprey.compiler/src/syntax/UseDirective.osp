use aves.*;

namespace osprey.compiler.syntax;

public abstract class UseDirective is ParseNode
{
	public new(location)
	{
		new base(location);
	}

	abstract override accept(visitor, arg);
}

public class UseFileDirective is UseDirective
{
	public new(location, fileName)
	{
		new base(location);

		this._fileName = fileName;
	}

	private _fileName;
	/// Summary: Gets a string {LiteralToken} containing the name of the referenced file.
	public get fileName => _fileName;

	override accept(visitor, arg)
	{
		return visitor.visitUseFileDirective(this, arg);
	}
}

public class UseNamespaceDirective is UseDirective
{
	public new(location, name)
	{
		new base(location);

		this._name = name;
	}

	private _name;
	/// Summary: Gets the {QualifiedName} of the namespace whose members are imported.
	public get name => _name;

	override accept(visitor, arg)
	{
		return visitor.visitUseNamespaceDirective(this, arg);
	}
}

public class UseSingleMemberDirective is UseDirective
{
	public new(location, fullName, alias)
	{
		new base(location);

		this._fullName = fullName;
		this._alias = alias;
	}

	private _fullName;
	/// Summary: Gets the {QualifiedName} of the member that is imported.
	public get fullName => _fullName;

	private _alias;
	/// Summary: Gets an {Identifier} containing the alias under which the member is imported,
	///          or null to use the member's original name.
	public get alias => _alias;

	override accept(visitor, arg)
	{
		return visitor.visitUseSingleMemberDirective(this, arg);
	}
}

public class UseMemberListDirective is UseDirective
{
	public new(location, parentName, importedMembers)
	{
		new base(location);

		this._parentName = parentName;
		this._importedMembers = claimAll(importedMembers);
	}

	private _parentName;
	/// Summary: Gets the {QualifiedName} of the namespace or type from which multiple members
	///          are imported.
	public get parentName => _parentName;

	private _importedMembers;
	/// Summary: Gets a {NodeList} containing {ImportedMember} instances for each imported
	///          member.
	public get importedMembers => _importedMembers;

	override accept(visitor, arg)
	{
		return visitor.visitUseMemberListDirective(this, arg);
	}
}

public class ImportedMember is ParseNode
{
	public new(location, memberName, alias)
	{
		new base(location);

		this._memberName = memberName;
		this._alias = alias;
	}

	private _memberName;
	/// Summary: Gets an {Identifier} containing the name of the member that is imported.
	public get memberName => _memberName;

	private _alias;
	/// Summary: Gets an {Identifier} containing the alias under which the member is imported,
	///          or null to use the member's original name.
	public get alias => _alias;

	override accept(visitor, arg)
	{
		return visitor.visitImportedMember(this, arg);
	}
}
