use aves.*;
use osprey.compiler.parser.*;

namespace osprey.compiler.syntax;

/// Summary: The {ParseTreeVisitor} class defines abstract visitor methods for all known
///          kinds of {ParseNode}s. Its only purpose is to ensure derived classes have
///          support for visiting all kinds of nodes. Usually, it makes more sense to
///          derive from {ParseTreeWalker} instead of {ParseTreeVisitor}, as the former
///          contains base implementations of all visitor methods, which walk the entire
///          parse tree.
public abstract class ParseTreeVisitor
{
	// Document

	public abstract visitDocument(document, arg);

	public abstract visitUseAliasDirective(directive, arg);

	public abstract visitUseFileDirective(directive, arg);

	public abstract visitUseNamespaceDirective(directive, arg);

	// Declarations

	public abstract visitClassConstantDeclaration(decl, arg);

	public abstract visitClassDeclaration(decl, arg);

	public abstract visitConstructorDeclaration(decl, arg);

	public abstract visitThisParameter(param, arg);

	public abstract visitEnumDeclaration(decl, arg);

	public abstract visitEnumMember(decl, arg);

	public abstract visitExternBody(node, arg);

	public abstract visitFieldDeclaration(decl, arg);

	public abstract visitGlobalConstantDeclaration(decl, arg);

	public abstract visitGlobalFunctionDeclaration(decl, arg);

	public abstract visitGlobalVariableDeclaration(decl, arg);

	public abstract visitPropertyDeclaration(decl, arg);

	public abstract visitIndexerDeclaration(decl, arg);

	public abstract visitAnnotation(annotation, arg);

	public abstract visitMethodDeclaration(decl, arg);

	public abstract visitParameter(param, arg);

	public abstract visitInvocatorDeclaration(decl, arg);

	public abstract visitIteratorDeclaration(decl, arg);

	public abstract visitNamespaceDeclaration(decl, arg);

	public abstract visitOperatorDeclaration(decl, arg);

	public abstract visitStaticConstructorDeclaration(decl, arg);

	public abstract visitVariableDeclarator(decl, arg);

	// Statements

	public abstract visitBlock(block, arg);

	public abstract visitBaseConstructorCall(stmt, arg);

	public abstract visitBreakStatement(stmt, arg);

	public abstract visitCompoundAssignment(stmt, arg);

	public abstract visitDoWhileStatement(stmt, arg);

	public abstract visitExpressionStatement(stmt, arg);

	public abstract visitForStatement(stmt, arg);

	public abstract visitIfStatement(stmt, arg);

	public abstract visitLocalConstantDeclaration(decl, arg);

	public abstract visitLocalFunctionDeclaration(decl, arg);

	public abstract visitLocalVariableDeclaration(decl, arg);

	public abstract visitNextStatement(stmt, arg);

	public abstract visitParallelAssignment(stmt, arg);

	public abstract visitReturnStatement(stmt, arg);

	public abstract visitSimpleAssignment(stmt, arg);

	public abstract visitThisConstructorCall(stmt, arg);

	public abstract visitThrowStatement(stmt, arg);

	public abstract visitTryStatement(stmt, arg);

	public abstract visitTryClause(clause, arg);

	public abstract visitGenericCatchClause(clause, arg);

	public abstract visitSpecificCatchClause(clause, arg);

	public abstract visitFinallyClause(clause, arg);

	public abstract visitWhileStatement(stmt, arg);

	public abstract visitWithStatement(stmt, arg);

	public abstract visitYieldStatement(stmt, arg);

	// Expressions

	public abstract visitBaseAccess(expr, arg);

	public abstract visitBinaryExpression(expr, arg);

	public abstract visitNullLiteral(expr, arg);

	public abstract visitBooleanLiteral(expr, arg);

	public abstract visitIntegerLiteral(expr, arg);

	public abstract visitRealLiteral(expr, arg);

	public abstract visitStringLiteral(expr, arg);

	public abstract visitCharLiteral(expr, arg);

	public abstract visitConditionalAndExpression(expr, arg);

	public abstract visitConditionalExpression(expr, arg);

	public abstract visitConditionalOrExpression(expr, arg);

	public abstract visitConditionalXorExpression(expr, arg);

	public abstract visitGetArgumentCountExpression(expr, arg);

	public abstract visitGlobalAccess(expr, arg);

	public abstract visitHashCreationExpression(expr, arg);

	public abstract visitHashMember(member, arg);

	public abstract visitIndexerAccess(expr, arg);

	public abstract visitInvocationExpression(expr, arg);

	public abstract visitIteratorAccess(expr, arg);

	public abstract visitLambdaMemberExpression(expr, arg);

	public abstract visitLambdaOperatorExpression(expr, arg);

	public abstract visitListCreationExpression(expr, arg);

	public abstract visitMemberAccess(expr, arg);

	public abstract visitNamedConstantExpression(expr, arg);

	public abstract visitNullCoalescingExpression(expr, arg);

	public abstract visitNullOrExpression(expr, arg);

	public abstract visitObjectCreationExpression(expr, arg);

	public abstract visitObjectInitializer(initializer, arg);

	public abstract visitMemberInitializer(initializer, arg);

	public abstract visitCollectionInitializer(initializer, arg);

	public abstract visitElementInitializer(initializer, arg);

	public abstract visitParenthesizedExpression(expr, arg);

	public abstract visitRefExpression(expr, arg);

	public abstract visitSafeAccess(expr, arg);

	public abstract visitSafeIndexerAccess(node, arg);

	public abstract visitSafeInvocation(node, arg);

	public abstract visitSafeIteratorAccess(node, arg);

	public abstract visitSafeMemberAccess(node, arg);

	public abstract visitSimpleLambdaExpression(expr, arg);

	public abstract visitSimpleName(expr, arg);

	public abstract visitThisAccess(expr, arg);

	public abstract visitTypeOfExpression(expr, arg);

	public abstract visitTypeTestExpression(expr, arg);

	public abstract visitUnaryExpression(expr, arg);

	public abstract visitUseInExpression(expr, arg);

	// Type names

	public abstract visitTypeName(typeName, arg);
}
