use aves;

namespace osprey.compiler.syntax;

/// Summary: Represents a parse node from the syntactic grammar. This differs from {Syntax}
///          in that it has a {parent} property, which allows parse nodes to walk up the
///          document structure. The {claim} method can be used to set the {parent} property
///          of a node, which should only be done in the constructor.
///
///          This class is abstract.
public abstract class ParseNode is Syntax
{
	public new(location)
	{
		new base(location);
	}

	private _parent = null;
	/// Summary: Gets the parent of this node, or null if it has none.
	public get parent => _parent;

	/// Summary: Claims the specified node, updating its {parent} property to
	///          the current node.
	/// Param node: A {ParseNode} instance to claim.
	/// Returns: The claimed node.
	/// Remarks: This method does not ensure that {node} is a {ParseNode}, nor
	///          that it is unclaimed. It is safe to pass null into {node}, so
	///          that the method can be called with optional parameters.
	protected claim(node)
	{
		if node is not null {
			node._parent = this;
		}
		return node;
	}

	/// Summary: Claims all of the nodes in the specified collection, updating
	///          their {parent} property to the current node.
	/// Param nodes: An iterable collection of {ParseNode} instances to claim.
	/// Returns: The {nodes} collection.
	/// Remarks: This method does not ensure that the values in {nodes} are
	///          instances of {ParseNode}, nor that they are unclaimed. It is
	///          not safe for {nodes} to contain null references; they must be
	///          removed from the collection first.
	protected claimAll(nodes)
	{
		for node in nodes {
			node._parent = this;
		}
		return nodes;
	}

	/// Summary: Finds the nearest ancestor node that matches the specified predicate,
	///          by walking up the {parent} chain and returning the first ancestor
	///          that matches the predicate.
	/// Param predicate: An invokable value that takes one argument (the current node)
	///          and returns a truthy value if the node matches a condition.
	/// Returns: The nearest ancestor for which {predicate} returned true, or null
	///          if none could be found.
	public findNearest(predicate)
	{
		var ancestor = _parent;
		while ancestor is not null {
			if predicate(ancestor) {
				return ancestor;
			}
			ancestor = ancestor._parent;
		}
		return null;
	}

	/// Summary: Finds the nearest ancestor of the specified type, by walking
	///          up the {parent} chain and returning the first ancestor that
	///          is of the specified type.
	/// Param type: An instance of {aves.reflection.Type} that represents the
	///             sought-after type.
	/// Returns: The nearest ancestor of type {type}, or null if none could
	///          be found.
	public findNearestOfType(type)
	{
		var ancestor = _parent;
		while ancestor is not null {
			if type.isInstance(ancestor) {
				return ancestor;
			}
			ancestor = ancestor._parent;
		}
		return null;
	}

	/// Summary: Visits the current node. The node implementation determines
	///          which method to call on {visitor}.
	/// Param visitor: An object with a visit method for the current node. The node
	///                type determines which method to call. This parameter should
	///                generally derive from {ParseTreeVisitor}.
	/// Param arg:     An argument that is passed to the visit method on {visitor}.
	/// Returns: The return value of the call to the visit method.
	/// Remarks: This method calls exactly one visit method on {visitor}. Children
	///          of this node are therefore not visited; the {visitor} must take
	///          care of calling {accept} (or similar) on the child nodes it is
	///          interested in. For this reason, it is recommended that {visitor}
	///          be derived from {ParseTreeVisitor}, which provides methods for all
	///          parse node types, with default implementations that simply walk
	///          the entire tree.
	public abstract accept(visitor, arg);
}
