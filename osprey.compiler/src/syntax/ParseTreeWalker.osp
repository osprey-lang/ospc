use aves.*;
use osprey.compiler.parser.*;

namespace osprey.compiler.syntax;

/// Summary: The {ParseTreeWalker} class implements an abstract walker for all known kinds
///          of {ParseNode}s. The default implementations of all the `visit*` methods in this
///          class simply walk through the parse tree in (roughly) source code order. Types
///          derived from {ParseTreeWalker} typically implement additional behavior on top
///          of this, such as name resolution, flow analysis, or compilation.
public abstract class ParseTreeWalker is ParseTreeVisitor
{
	// Document

	overridable override visitDocument(document, arg)
	{
		document.useDirectives.acceptAll(this, arg);
		document.globalAnnotations.acceptAll(this, arg);
		document.members.acceptAll(this, arg);
		return null;
	}

	overridable override visitUseFileDirective(directive, arg)
	{
		return null;
	}

	overridable override visitUseNamespaceDirective(directive, arg)
	{
		return null;
	}

	overridable override visitUseSingleMemberDirective(directive, arg)
	{
		return null;
	}

	overridable override visitUseMemberListDirective(directive, arg)
	{
		directive.importedMembers.acceptAll(this, arg);
		return null;
	}

	overridable override visitImportedMember(importedMember, arg)
	{
		return null;
	}

	// Declarations

	overridable override visitClassConstantDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.constants.acceptAll(this, arg);
		return null;
	}

	overridable override visitClassDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		if decl.baseType is TypeName {
			decl.baseType.accept(this, arg);
		}
		decl.members.acceptAll(this, arg);
		return null;
	}

	overridable override visitConstructorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body?.accept(this, arg);
		return null;
	}

	overridable override visitThisParameter(param, arg)
	{
		visitParameter(param, arg);
		return null;
	}

	overridable override visitEnumDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.members.acceptAll(this, arg);
		return null;
	}

	overridable override visitEnumMember(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.value?.accept(this, arg);
		return null;
	}

	overridable override visitExternBody(node, arg)
	{
		node.locals?.accept(this, arg);
		return null;
	}

	overridable override visitFieldDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.fields.acceptAll(this, arg);
		return null;
	}

	overridable override visitGlobalConstantDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.constants.acceptAll(this, arg);
		return null;
	}

	overridable override visitGlobalFunctionDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	overridable override visitPropertyDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.body?.accept(this, arg);
		return null;
	}

	overridable override visitIndexerDeclaration(decl, arg)
	{
		decl.parameters.acceptAll(this, arg);
		visitPropertyDeclaration(decl, arg);
		return null;
	}

	overridable override visitAnnotation(annotation, arg)
	{
		visitTypeName(annotation.type, arg);
		annotation.positionalArguments.acceptAll(this, arg);
		annotation.namedArguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitMethodDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body?.accept(this, arg);
		return null;
	}

	overridable override visitParameter(param, arg)
	{
		param.defaultValue?.accept(this, arg);
		return null;
	}

	overridable override visitInvocatorDeclaration(decl, arg)
	{
		visitMethodDeclaration(decl, arg);
		return null;
	}

	overridable override visitIteratorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	overridable override visitNamespaceDeclaration(decl, arg)
	{
		decl.members.acceptAll(this, arg);
		return null;
	}

	overridable override visitOperatorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	overridable override visitStaticConstructorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	overridable override visitVariableDeclarator(decl, arg)
	{
		decl.initializer?.accept(this, arg);
		return null;
	}

	// Statements

	overridable override visitBlock(block, arg)
	{
		beginBlock(block, arg);
		block.statements.acceptAll(this, arg);
		endBlock(block, arg);
		return null;
	}

	public overridable beginBlock(block, arg)
	{
	}

	public overridable endBlock(block, arg)
	{
	}

	overridable override visitBaseConstructorCall(stmt, arg)
	{
		stmt.arguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitBreakStatement(stmt, arg)
	{
		return null;
	}

	overridable override visitCompoundAssignment(stmt, arg)
	{
		stmt.left.accept(this, arg);
		stmt.right.accept(this, arg);
		return null;
	}

	overridable override visitDoWhileStatement(stmt, arg)
	{
		stmt.body.accept(this, arg);
		stmt.condition?.accept(this, arg);
		return null;
	}

	overridable override visitExpressionStatement(stmt, arg)
	{
		stmt.expression.accept(this, arg);
		return null;
	}

	overridable override visitForStatement(stmt, arg)
	{
		stmt.expression.accept(this, arg);
		stmt.body.accept(this, arg);
		stmt.elseClause?.accept(this, arg);
		return null;
	}

	overridable override visitIfStatement(stmt, arg)
	{
		stmt.condition.accept(this, arg);
		stmt.consequence.accept(this, arg);
		stmt.alternative?.accept(this, arg);
		return null;
	}

	overridable override visitLocalConstantDeclaration(decl, arg)
	{
		decl.constants.acceptAll(this, arg);
		return null;
	}

	overridable override visitLocalFunctionDeclaration(decl, arg)
	{
		decl.parameters.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	overridable override visitLocalVariableDeclaration(decl, arg)
	{
		decl.variables.acceptAll(this, arg);
		return null;
	}

	overridable override visitNextStatement(stmt, arg)
	{
		return null;
	}

	overridable override visitParallelAssignment(stmt, arg)
	{
		stmt.targets.acceptAll(this, arg);
		stmt.values.acceptAll(this, arg);
		return null;
	}

	overridable override visitReturnStatement(stmt, arg)
	{
		stmt.returnValue?.accept(this, arg);
		return null;
	}

	overridable override visitSimpleAssignment(stmt, arg)
	{
		stmt.target.accept(this, arg);
		stmt.value.accept(this, arg);
		return null;
	}

	overridable override visitThisConstructorCall(stmt, arg)
	{
		stmt.arguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitThrowStatement(stmt, arg)
	{
		stmt.expression?.accept(this, arg);
		return null;
	}

	overridable override visitTryStatement(stmt, arg)
	{
		visitTryClause(stmt.tryClause, arg);
		stmt.catchClauses.acceptAll(this, arg);
		if stmt.finallyClause is not null {
			visitFinallyClause(stmt.finallyClause, arg);
		}
		return null;
	}

	overridable override visitTryClause(clause, arg)
	{
		visitBlock(clause, arg);
		return null;
	}

	overridable override visitGenericCatchClause(clause, arg)
	{
		visitBlock(clause, arg);
		return null;
	}

	overridable override visitSpecificCatchClause(clause, arg)
	{
		visitTypeName(clause.caughtType, arg);
		visitGenericCatchClause(clause, arg);
		return null;
	}

	overridable override visitFinallyClause(clause, arg)
	{
		visitBlock(clause, arg);
		return null;
	}

	overridable override visitWhileStatement(stmt, arg)
	{
		stmt.condition.accept(this, arg);
		stmt.body.accept(this, arg);
		return null;
	}

	overridable override visitWithStatement(stmt, arg)
	{
		stmt.expression.accept(this, arg);
		stmt.body.accept(this, arg);
		return null;
	}

	overridable override visitYieldStatement(stmt, arg)
	{
		stmt.returnValue.accept(this, arg);
		return null;
	}

	// Expressions

	overridable override visitBaseAccess(expr, arg)
	{
		return null;
	}

	overridable override visitBinaryExpression(expr, arg)
	{
		expr.left.accept(this, arg);
		expr.right.accept(this, arg);
		return null;
	}

	public overridable visitLiteralExpression(expr, arg)
	{
		return null;
	}

	overridable override visitNullLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	overridable override visitBooleanLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	overridable override visitIntegerLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	overridable override visitRealLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	overridable override visitStringLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	overridable override visitCharLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	overridable override visitConditionalAndExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	overridable override visitConditionalExpression(expr, arg)
	{
		expr.condition.accept(this, arg);
		expr.truePart.accept(this, arg);
		expr.falsePart.accept(this, arg);
		return null;
	}

	overridable override visitConditionalOrExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	overridable override visitConditionalXorExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	overridable override visitGetArgumentCountExpression(expr, arg)
	{
		return null;
	}

	overridable override visitGlobalAccess(expr, arg)
	{
		return null;
	}

	overridable override visitHashCreationExpression(expr, arg)
	{
		expr.members.acceptAll(this, arg);
		return null;
	}

	overridable override visitHashMember(member, arg)
	{
		member.key.accept(this, arg);
		member.value.accept(this, arg);
		return null;
	}

	overridable override visitIndexerAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		expr.arguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitInvocationExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		expr.arguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitIteratorAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	overridable override visitLambdaMemberExpression(expr, arg)
	{
		expr.members.acceptAll(this, arg);
		return null;
	}

	overridable override visitLambdaOperatorExpression(expr, arg)
	{
		return null;
	}

	overridable override visitListCreationExpression(expr, arg)
	{
		expr.values.acceptAll(this, arg);
		return null;
	}

	overridable override visitMemberAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	overridable override visitNamedConstantExpression(expr, arg)
	{
		return null;
	}

	overridable override visitNullCoalescingExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	overridable override visitNullOrExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	overridable override visitObjectCreationExpression(expr, arg)
	{
		visitTypeName(expr.type, arg);
		expr.arguments.acceptAll(this, arg);
		expr.initializer?.accept(this, arg);
		return null;
	}

	overridable override visitObjectInitializer(initializer, arg)
	{
		initializer.members.acceptAll(this, arg);
		return null;
	}

	overridable override visitMemberInitializer(initializer, arg)
	{
		initializer.expression.accept(this, arg);
		return null;
	}

	overridable override visitCollectionInitializer(initializer, arg)
	{
		initializer.elements.acceptAll(this, arg);
		return null;
	}

	overridable override visitElementInitializer(initializer, arg)
	{
		initializer.arguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitParenthesizedExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	overridable override visitRefExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	overridable override visitSafeAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		expr.chain.acceptAll(this, arg);
		return null;
	}

	overridable override visitSafeIndexerAccess(node, arg)
	{
		node.arguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitSafeInvocation(node, arg)
	{
		node.arguments.acceptAll(this, arg);
		return null;
	}

	overridable override visitSafeIteratorAccess(node, arg)
	{
		return null;
	}

	overridable override visitSafeMemberAccess(node, arg)
	{
		return null;
	}

	overridable override visitSimpleLambdaExpression(expr, arg)
	{
		expr.parameters.acceptAll(this, arg);
		expr.body.accept(this, arg);
		return null;
	}

	overridable override visitSimpleName(expr, arg)
	{
		return null;
	}

	overridable override visitThisAccess(expr, arg)
	{
		return null;
	}

	overridable override visitTypeOfExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	overridable override visitTypeTestExpression(expr, arg)
	{
		expr.expression.accept(this, arg);
		if expr.type is not null {
			visitTypeName(expr.type, arg);
		}
		return null;
	}

	overridable override visitUnaryExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	overridable override visitUseInExpression(expr, arg)
	{
		expr.variables.acceptAll(this, arg);
		expr.expression.accept(this, arg);
		return null;
	}

	// Type names

	overridable override visitTypeName(typeName, arg)
	{
		return null;
	}
}
