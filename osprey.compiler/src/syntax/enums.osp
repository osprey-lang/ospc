use aves;

namespace osprey.compiler.syntax;

/// Summary: Represents a binary operator.
public enum BinaryOperator
{
	/// Summary: ??
	nullCoalescing,
	/// Summary: ?!
	nullOr,
	/// Summary: or
	conditionalOr,
	/// Summary: xor
	conditionalXor,
	/// Summary: and
	conditionalAnd,
	/// Summary: ==
	equality,
	/// Summary: !=
	inequality,
	/// Summary: refeq
	refEquality,
	/// Summary: not refeq
	refInequality,
	/// Summary: <
	less,
	/// Summary: <=
	lessEqual,
	/// Summary: >
	greater,
	/// Summary: >=
	greaterEqual,
	/// Summary: <=>
	comparison,
	/// Summary: <<
	shiftLeft,
	/// Summary: >>
	shiftRight,
	/// Summary: +
	addition,
	/// Summary: -
	subtraction,
	/// Summary: |
	bitwiseOr,
	/// Summary: ^
	bitwiseXor,
	/// Summary: *
	multiplication,
	/// Summary: /
	division,
	/// Summary: %
	modulo,
	/// Summary: &
	bitwiseAnd,
	/// Summary: **
	exponentiation,
	/// Summary: ->
	functionApplication,
	/// Summary: ::
	concatenation,
}

/// Summary: Represents a unary operator.
public enum UnaryOperator
{
	/// Summary: +
	plus,
	/// Summary: -
	negation,
	/// Summary: ~
	bitwiseNot,
	/// Summary: not
	booleanNot,
}

/// Summary: Represents a lambda operator; that is, an operator that can follow an `@`.
public enum LambdaOperator
{
	/// Summary: @or
	conditionalOr,
	/// Summary: @xor
	conditionalXor,
	/// Summary: @and
	conditionalAnd,
	/// Summary: @==
	equality,
	/// Summary: @!=
	inequality,
	/// Summary: @<
	less,
	/// Summary: @<=
	lessEqual,
	/// Summary: @>
	greater,
	/// Summary: @>=
	greaterEqual,
	/// Summary: @<=>
	comparison,
	/// Summary: @<<
	shiftLeft,
	/// Summary: @>>
	shiftRight,
	/// Summary: @+
	plus,
	/// Summary: @-
	minus,
	/// Summary: @|
	bitwiseOr,
	/// Summary: @^
	bitwiseXor,
	/// Summary: @*
	multiplication,
	/// Summary: @/
	division,
	/// Summary: @%
	modulo,
	/// Summary: @&
	bitwiseAnd,
	/// Summary: @**
	exponentiation,
	/// Summary: @->
	functionApplication,
	/// Summary: @::
	concatenation,
	/// Summary: @~
	bitwiseNot,
	/// Summary: @not
	booleanNot,
}

/// Summary: Specifies the accessibility of a member.
public enum Accessibility
{
	/// Summary: Accessibility is not applicable to this member.
	notApplicable = -1,
	/// Summary: No explicitly declared accessibility.
	none = 0,
	/// Summary: Public accessibility.
	\public = 1,
	/// Summary: Internal accessibility.
	\internal = 2,
	/// Summary: Protected accessibility.
	\protected = 3,
	/// Summary: Private accessibility.
	\private = 4,
}
