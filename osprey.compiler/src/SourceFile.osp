use aves.*;
use io.*;

namespace osprey.compiler;

public class SourceFile
{
	private new(this._fileName, this._source, this._hash);

	private _fileName;
	/// Summary: Gets the name of the file that the {SourceFile} was opened from.
	public get fileName => _fileName;

	private _source;
	/// Summary: Gets the text contents of the file.
	public get source => _source;

	private _hash;
	/// Summary: Gets a {Buffer} containing the SHA-1 hash of the file’s bytes, or null if
	///          the program is being compiled without debug symbols.
	public get hash => _hash;

	// Initialized to a {LineCache} on demand.
	private lineCache;

	private getLineCache()
	{
		if lineCache is null {
			lineCache = new LineCache(_source);
		}
		return lineCache;
	}

	/// Summary: Finds the line number corresponding to the specified source index.
	/// Param index: The index of the character whose line number to find.
	/// Returns: The 1-based line number of the specified index within the file source.
	/// Throws TypeConversionError:
	///          {index} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than the length of {source}.
	public getLineNumber(index)
	{
		index = int(index);
		if index < 0 or index > source.length {
			throw new ArgumentRangeError("index");
		}

		return getLineCache().getEnclosingLineNumber(index);
	}
	/// Summary: Finds the line number and column corresponding to the specified
	///          source index.
	/// Param index:   The index of the character whose line and column to find.
	/// Param tabSize: The size of a tab character (`'\t'`), in number of characters.
	///                This is used when calculating the column number.
	/// Param column:  (ref) Receives the 1-based column number of the syntax element.
	/// Returns: The 1-based line number of the specified index within the file source.
	/// Throws TypeConversionError:
	///          {index} or {tabSize} could not be converted to an Int.
	/// Throws ArgumentRangeError:
	///          {index} is less than zero or greater than the length of {source}.
	///
	///          {tabSize} is less than zero.
	public getLineNumber(index, tabSize, ref column)
	{
		index = int(index);
		if index < 0 or index > source.length {
			throw new ArgumentRangeError("index");
		}
		tabSize = int(tabSize);
		if tabSize <= 0 {
			throw new ArgumentRangeError("tabSize");
		}

		var lineSpan = getLineCache().getEnclosingLineSpan(index);

		// In order to find the column, we have to walk the source. We will of course
		// start at the line's startIndex.
		var col = 0;
		var i = lineSpan.startIndex;
		while i < index {
			var ch = source[i];
			i += 1;
			if ch == '\t' {
				col += tabSize - col % tabSize;
			}
			else {
				col += 1;
			}
		}

		column = col + 1;
		return lineSpan.lineNumber;
	}

	/// Summary: Opens the specified source file, without computing the SHA-1 hash of
	///          the file’s bytes.
	/// Param fileName: The name of the file to open.
	/// Returns: A new {SourceFile} that represents the opened file.
	public static open(fileName)
	{
		return open(fileName, false);
	}
	/// Summary: Opens the specified source file, optionally computing the SHA-1 hash of
	///          the file’s bytes as well.
	/// Param fileName: The name of the file to open.
	/// Param computeHash: True to also compute a SHA-1 hash of the file’s bytes.
	/// Returns: A new {SourceFile} that represents the opened file.
	public static open(fileName, computeHash)
	{
		fileName = string(fileName);

		var hash = null;

		var fileText;
		if computeHash {
			with fs = File.openRead(fileName) {
				if not fs.canSeek {
					throw new IOError("The source file '{0}' must be seekable.".format([fileName]));
				}

				// TODO: SourceFile.open(fileName, true)
				throw new NotImplementedError("File hashing is not yet supported.");
			}
		}
		else {
			fileText = File.readAllText(fileName);
		}

		return new SourceFile(fileName, fileText, hash);
	}

	/// Summary: Creates a new {SourceFile} that represents an anonymous file. The name
	///          of the file will be `<anonymous>`. The file will not have its contents
	///          hashed.
	/// Param source: The text contents of the file.
	/// Returns: A new {SourceFile} that contains the specified text.
	public static createAnon(source)
	{
		return new SourceFile(anonName, string(source), null);
	}
	/// Summary: Creates a new {SourceFile} that represents an anonymous file with the
	///          specified name. The file will not have its contents hashed.
	/// Param source: The text contents of the file.
	/// Param fileName: The name of the anonymous file.
	/// Returns: A new {SourceFile} that contains the specified text.
	public static createAnon(source, fileName)
	{
		return new SourceFile(string(fileName), string(source), null);
	}

	private static anonName = "<anonymous>";
}
