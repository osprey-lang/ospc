use aves;

namespace osprey.compiler.syntax.wrapped;

public abstract class WrappedUseDirective is WrappedNode
{
	public new(wrappedNode)
	{
		new base(wrappedNode);
	}

	abstract override accept(visitor, arg);
}

public class WrappedUseFileDirective is WrappedUseDirective
{
	public new(wrappedNode)
	{
		new base(wrappedNode);
	}

	/// Summary: Gets a string {LiteralToken} containing the name of the file
	///          that is referenced by this directive.
	public get fileName = wrappedNode.fileName;

	override accept(visitor, arg)
	{
		return visitor.visitUseFileDirective(this, arg);
	}
}

public class WrappedUseNamespaceDirective is WrappedUseDirective
{
	public new(wrappedNode)
	{
		new base(wrappedNode);
	}

	/// Summary: Gets the {QualifiedName} of the namespace that is imported
	///          by this directive.
	public get name = wrappedNode.name;

	override accept(visitor, arg)
	{
		return visitor.visitUseNamespaceDirective(this, arg);
	}
}

public class WrappedUseAliasDirective is WrappedUseDirective
{
	public new(wrappedNode)
	{
		new base(wrappedNode);
	}

	/// Summary: Gets an {Identifier} corresponding to the alias name introduced
	///          by this directive.
	public get alias = wrappedNode.alias;

	/// Summary: Gets the {QualifiedName} of the member that is aliased.
	public get fullName = wrappedNode.fullName;

	override accept(visitor, arg)
	{
		return visitor.visitUseAliasDirective(this, arg);
	}
}
