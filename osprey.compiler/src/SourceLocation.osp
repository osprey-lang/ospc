use aves;

namespace osprey.compiler.syntax;

public class SourceLocation
{
	public new(sourceFile, startIndex, endIndex)
	{
		if sourceFile is not SourceFile:
			throw new ArgumentTypeError("sourceFile", typeof(SourceFile));

		this._sourceFile = sourceFile;
		this._startIndex = int(startIndex);
		this._endIndex   = int(endIndex);
	}

	private _sourceFile;
	/// Summary: Gets the {SourceFile} that this location is contained within.
	public get sourceFile => _sourceFile;

	private _startIndex;
	/// Summary: Gets the inclusive start index of this location within the source file string.
	public get startIndex => _startIndex;

	private _endIndex;
	/// Summary: Gets the exclusive end index of this location within the source file string.
	public get endIndex => _endIndex;

	/// Summary: Gets the text value of this source location.
	/// Returns: A string containing the text value of this source location.
	public getText()
	{
		return _sourceFile.source
			.substringTo(_startIndex, _endIndex)
			.intern();
	}

	/// Summary: Gets the line number of this source location.
	/// Returns: The 1-based line number of this source location within the source file.
	public getLineNumber()
	{
		var column;
		return getLineNumber(1, ref column);
	}
	/// Summary: Gets the line number of this source location.
	/// Param tabSize: The size of a tab character (`'\t'`), in number of characters.
	///                This is used when calculating the column number.
	/// Param column:  (ref) Receives the 1-based column number of the source location.
	/// Returns: The 1-based line number of this source location within the source file.
	public getLineNumber(tabSize, ref column)
	{
		return sourceFile.getLineNumber(startIndex, tabSize, ref column);
	}

	/// Summary: Determines whether the source location contains the specified source
	///          index.
	/// Param index: The source index to test against.
	/// Returns: True if this source location contains the specified source index;
	///          otherwise, false.
	public contains(index)
	{
		return index >= _startIndex and index < _endIndex;
	}

	/// Summary: Determines whether the current source location fully encloses the
	///          specified {SourceLocation} or {Syntax}.
	/// Param other: The {SourceLocation} or {Syntax} to test against.
	/// Returns: True if the current source location fully encloses {other}; that is,
	///          no part of {other} is outside the current source location. Otherwise,
	///          false.
	/// Throws ArgumentNullError:
	///          {other} is null.
	/// Remarks: To test if the source location contains a single index, use {contains}.
	public encloses(other)
	{
		if other is null:
			throw new ArgumentNullError("other");
		if other is Syntax:
			other = other.location;
		return encloses(other.startIndex, other.endIndex);
	}
	/// Summary: Determines whether the current source location fully encloses the
	///          specified range of source characters.
	/// Param startIndex: The inclusive start index of the range.
	/// Param endIndex:   The exclusive end index of the range.
	/// Returns: True if the current source location fully encloses the range described
	///          by {startIndex} and {endIndex}; that is, no part of the range is
	///          outside the current source location. Otherwise, false.
	/// Throws ArgumentError:
	///          {startIndex} is greater than {endIndex}.
	/// Remarks: To test if the source location contains a single index, use {contains}.
	public encloses(startIndex, endIndex)
	{
		if endIndex < startIndex:
			throw new ArgumentError("startIndex must be less than or equal to endIndex.");
		return this._startIndex >= startIndex and this._endIndex <= endIndex;
	}

	/// Summary: Determines whether the current source location overlaps the specified
	///          {SourceLocation} or {Syntax}.
	/// Param other: The {SourceLocation} or {Syntax} to test against.
	/// Returns: True if the current source location overlaps {other}; that is, any part
	///          of {other} intersects any part of the current source location. Otherwise,
	///          false.
	/// Throws ArgumentNullError:
	///          {other} is null.
	/// Remarks: To test if the source location contains a single index, use {contains}.
	public overlaps(other)
	{
		if other is null:
			throw new ArgumentNullError("other");
		if other is Syntax:
			other = other.location;
		return overlaps(other.startIndex, other.endIndex);
	}
	/// Summary: Determines whether the current source location overlaps the specified
	///          range of source characters.
	/// Param startIndex: The inclusive start index of the range.
	/// Param endIndex:   The exclusive end index of the range.
	/// Returns: True if the current source location overlaps the range described by
	///          {startIndex} and {endIndex}; that is, any part of the range intersects
	///          any part of the current source location. Otherwise, false.
	/// Throws ArgumentError:
	///          {startIndex} is greater than {endIndex}.
	/// Remarks: To test if the source location contains a single index, use {contains}.
	public overlaps(startIndex, endIndex)
	{
		if endIndex < startIndex:
			throw new ArgumentError("startIndex must be less than or equal to endIndex.");
		return startIndex <= this._endIndex and endIndex >= this._startIndex;
	}

	override getHashCode()
	{
		var indexHash = _startIndex | (_endIndex << 16);
		return indexHash ^ _sourceFile.getHashCode();
	}

	operator ==(a, b)
	{
		if b is not SourceLocation:
			return false;

		return a._startIndex == b._startIndex and
			a._endIndex == b._endIndex and
			a._sourceFile == b._sourceFile;
	}
}
