use aves.*;
use io.*;
use osprey.compiler.parser.*;
use aves.reflection.Module;

namespace osprey.compiler;

public static class ErrorCode
{
	//<region: Generated code>

{$errorCodes$}
	//</region>

	private static errorMessages;

	private static loadMessages()
	{
		errorMessages = ErrorMessageReader.loadMessages();
	}

	/// Summary: Gets an error or warning message corresponding to the specified error
	///          code. The error code is one of the {ErrorCode} constants.
	/// Param errorCode:
	///          An error or warning code. This code is one of the {ErrorCode} constants.
	/// Returns: A string containing a message for the error code.
	public static getMessage(errorCode)
	{
		if errorMessages is null {
			loadMessages();
		}

		var message = fallbackMessage;
		errorMessages.tryGet(errorCode, ref message);
		return message;
	}

	/// Summary: Gets an error or warning message corresponding to the specified error
	///          code, and formats it with the specified arguments. The error code is
	///          one of the {ErrorCode} constants.
	/// Param errorCode:
	///          An error or warning code. This code is one of the {ErrorCode} constants.
	/// Param formatArgs:
	///          A List or Hash that is passed to {String.format} to format the message.
	/// Returns: A formatted string containing a message for the error code.
	/// Remarks: The message is formatted before being returned, according to
	///          {String.format}. If it doesnâ€™t contain any format placeholders,
	///          the format arguments are ignored.
	public static getMessage(errorCode, formatArgs)
	{
		return getMessage(errorCode).format(formatArgs);
	}

	private const fallbackMessage = "Unknown compile-time error.";
}
