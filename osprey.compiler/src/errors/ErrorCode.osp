use aves.*;
use io.*;
use osprey.compiler.parser.*;
use aves.reflection.Module;

namespace osprey.compiler;

public static class ErrorCode
{
	//<region: Generated code>

	public const unspecified = 0000;
	public const syntax = 1000;
	public const invalidCharacter = 1001;
	public const delimitedCommentNotTerminated = 1101;
	public const underscoreWithoutDigits = 1201;
	public const multipleDecimalPoints = 1202;
	public const exponentialPartBeforeDecimalPoint = 1203;
	public const multipleExponentialParts = 1204;
	public const invalidExponentialPart = 1205;
	public const underscoreAfterDecimalPoint = 1206;
	public const multipleConsecutiveUnderscores = 1207;
	public const multiplierOnReal = 1208;
	public const unsignedOnReal = 1209;
	public const numberOutOfRange = 1210;
	public const hexNumberWithoutDigits = 1211;
	public const newlineInString = 1301;
	public const stringNotTerminated = 1302;
	public const newlineInCharLiteral = 1401;
	public const emptyCharLiteral = 1402;
	public const charLiteralNotTerminated = 1403;
	public const charLiteralTooLong = 1404;
	public const missingEscapeSequence = 1501;
	public const invalidEscapeSequence = 1502;
	public const invalidUnicodeEscapeSequence = 1503;
	public const unicodeEscapeOutOfRange = 1504;
	public const unexpectedToken = 1601;
	public const duplicateModifier = 1610;
	public const multipleAccessibilityModifiers = 1611;
	public const invalidModifierForGlobalFunctionOrConstant = 1612;
	public const invalidModifierForConstructor = 1613;
	public const invalidModifierForStaticConstructor = 1614;
	public const invalidModifierForField = 1615;
	public const invalidModifierForStaticMethod = 1616;
	public const methodCannotBeInheritable = 1617;
	public const abstractMethodCannotBeOverridable = 1618;
	public const invocatorCannotBeStatic = 1619;
	public const invalidModifierForStaticProperty = 1620;
	public const propertyCannotBeInheritable = 1621;
	public const abstractPropertyCannotBeOverridable = 1622;
	public const indexerCannotBeStatic = 1623;
	public const invalidModifierForClassConstant = 1624;
	public const invalidModifierForOperator = 1625;
	public const invalidModifierForIterator = 1626;
	public const expectedNamespaceMember = 1631;
	public const invalidNamespaceModifiers = 1632;
	public const invalidLocationForFileNamespace = 1633;
	public const invalidModifierForClass = 1641;
	public const invalidModifierForEnum = 1642;
	public const staticClassCannotBeAbstractOrInheritable = 1643;
	public const classCannotBeBothAbstractAndInheritable = 1644;
	public const indexerCannotHaveOptionalParameters = 1651;
	public const indexerCannotHaveVariadicParameter = 1652;
	public const indexerCannotHaveRefParameters = 1653;
	public const nonAbstractPropertyCannotHaveEmptyBody = 1654;
	public const abstractPropertyMustHaveEmptyBody = 1655;
	public const nonAbstractMethodCannotHaveEmptyBody = 1661;
	public const abstractMethodMustHaveEmptyBody = 1662;
	public const operatorCannotHaveOptionalParameters = 1671;
	public const operatorCannotHaveVariadicParameter = 1672;
	public const operatorCannotHaveRefParameters = 1673;
	public const wrongParameterCountForUnaryOperator = 1674;
	public const wrongParameterCountForBinaryOperator = 1675;
	public const wrongParameterCountForUnaryOrBinaryOperator = 1676;
	public const invalidUseDirective = 1681;
	public const invalidUseMemberDirective = 1682;
	public const invalidUseMemberDirectiveAfterDot = 1683;
	public const variadicParameterCannotBeOptional = 1701;
	public const variadicMustBeLastParameter = 1702;
	public const cannotMixVariadicAndOptionalParameters = 1703;
	public const requiredParameterAfterOptional = 1704;
	public const cannotPassVariadicByRef = 1705;
	public const cannotPassOptionalByRef = 1706;
	public const multipleVariadicParameters = 1707;
	public const cannotPassThisParameterByRef = 1708;
	public const expectedParameter = 1709;
	public const expectedArgument = 1721;
	public const refArgumentNotAllowed = 1722;
	public const positionalAnnotationArgumentMustComeBeforeNamed = 1723;
	public const expectedLoopAfterLabel = 1801;
	public const expectedJumpStatement = 1802;
	public const specificCatchClauseAfterGeneric = 1803;
	public const multipleGenericCatchClauses = 1804;
	public const tryStatementMustHaveCatchOrFinally = 1805;
	public const expectedParallelAssignment = 1806;
	public const parallelAssignmentWrongValueCount = 1807;
	public const expectedStatementTerminator = 1808;
	public const constantWithoutValue = 1809;
	public const withStatementVariableWithoutValue = 1811;
	public const invalidElseClause = 1812;
	public const expectedPrimaryExpression = 1851;
	public const invalidStatementExpression = 1852;
	public const expressionMustBeAssignable = 1853;
	public const expectedMemberToAccess = 1854;
	public const expectedConstructorArgumentsOrInitializer = 1855;
	public const invalidLambdaExpression = 1856;
	public const letInVariableWithoutValue = 1857;
	public const expectedExternKeyword = 1901;
	public const unknownExternParameter = 1902;
	public const expectedExternMethodName = 1903;
	public const unknownNamedConstant = 1904;
	public const nameError = 2001;
	public const nameErrorWithoutName = 2002;
	public const undefinedName = 2003;
	public const undefinedNameWithoutName = 2004;
	public const duplicateName = 2005;
	public const duplicateNameWithoutName = 2006;
	public const unreachableCode = 6001;
	public const unusedVariable = 6002;
	public const variableAssignedButUnused = 6003;
	public const variableUsedButUnassigned = 6004;

	//</region>

	private static errorMessages;

	private static loadMessages()
	{
		errorMessages = ErrorMessageReader.loadMessages();
	}

	/// Summary: Gets an error or warning message corresponding to the specified error
	///          code. The error code is one of the {ErrorCode} constants.
	/// Param errorCode:
	///          An error or warning code. This code is one of the {ErrorCode} constants.
	/// Returns: A string containing a message for the error code.
	public static getMessage(errorCode)
	{
		if errorMessages is null {
			loadMessages();
		}

		var message = fallbackMessage;
		errorMessages.tryGet(errorCode, ref message);
		return message;
	}

	/// Summary: Gets an error or warning message corresponding to the specified error
	///          code, and formats it with the specified arguments. The error code is
	///          one of the {ErrorCode} constants.
	/// Param errorCode:
	///          An error or warning code. This code is one of the {ErrorCode} constants.
	/// Param formatArgs:
	///          A List or Hash that is passed to {String.format} to format the message.
	/// Returns: A formatted string containing a message for the error code.
	/// Remarks: The message is formatted before being returned, according to
	///          {String.format}. If it doesnâ€™t contain any format placeholders,
	///          the format arguments are ignored.
	public static getMessage(errorCode, formatArgs)
	{
		return getMessage(errorCode).format(formatArgs);
	}

	private const fallbackMessage = "Unknown compile-time error.";
}
