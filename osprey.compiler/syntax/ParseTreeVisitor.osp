use namespace aves;
use namespace osprey.compiler.parser;

namespace osprey.compiler.syntax;

/// Summary: The {ParseTreeVisitor} class implements an abstract visitor for all known
///          {ParseNode}s. The default implementations of all the `visit*` methods in
///          this class simply walk through the parse tree in source code order. Classes
///          derived from {ParseTreeVisitor} typically implement additional behavior
///          on top of this, such as name resolution, flow analysis, or compilation.
public abstract class ParseTreeVisitor
{
	// Document

	public overridable visitDocument(document, arg)
	{
		document.version?.accept(this, arg);
		document.useDirectives.acceptAll(this, arg);
		document.members.acceptAll(this, arg);
		document.statements.acceptAll(this, arg);
		return null;
	}

	public overridable visitUseAliasDirective(directive, arg)
	{
		return null;
	}

	public overridable visitUseFileDirective(directive, arg)
	{
		return null;
	}

	public overridable visitUseModuleDirective(directive, arg)
	{
		return null;
	}

	public overridable visitUseNamespaceDirective(directive, arg)
	{
		return null;
	}

	public overridable visitVersionSpecifier(version, arg)
	{
		return null;
	}

	// Declarations

	public overridable visitClassConstantDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.constants.acceptAll(this, arg);
		return null;
	}

	public overridable visitClassDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		if decl.baseType is TypeName:
			decl.baseType.accept(this, arg);
		decl.members.acceptAll(this, arg);
		return null;
	}

	public overridable visitConstructorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body?.accept(this, arg);
		return null;
	}

	public overridable visitThisParameter(param, arg)
	{
		visitParameter(param, arg);
		return null;
	}

	public overridable visitEnumDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.members.acceptAll(this, arg);
		return null;
	}

	public overridable visitEnumMember(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.value?.accept(this, arg);
		return null;
	}

	public overridable visitExternBody(node, arg)
	{
		node.maxStack?.accept(this, arg);
		node.locals?.accept(this, arg);
		return null;
	}

	public overridable visitFieldDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.fields.acceptAll(this, arg);
		return null;
	}

	public overridable visitGlobalConstantDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.constants.acceptAll(this, arg);
		return null;
	}

	public overridable visitGlobalFunctionDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	public overridable visitGlobalVariableDeclaration(decl, arg)
	{
		decl.declaration.accept(this, arg);
		return null;
	}

	public overridable visitPropertyDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.body?.accept(this, arg);
		return null;
	}

	public overridable visitIndexerDeclaration(decl, arg)
	{
		decl.parameters.acceptAll(this, arg);
		visitPropertyDeclaration(decl, arg);
		return null;
	}

	public overridable visitAnnotation(annotation, arg)
	{
		visitTypeName(annotation.type, arg);
		annotation.positionalArguments.acceptAll(this, arg);
		annotation.namedArguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitMethodDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body?.accept(this, arg);
		return null;
	}

	public overridable visitParameter(param, arg)
	{
		param.defaultValue?.accept(this, arg);
		return null;
	}

	public overridable visitInvocatorDeclaration(decl, arg)
	{
		visitMethodDeclaration(decl, arg);
		return null;
	}

	public overridable visitIteratorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	public overridable visitNamespaceDeclaration(decl, arg)
	{
		decl.members.acceptAll(this, arg);
		return null;
	}

	public overridable visitOperatorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.parameters.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	public overridable visitStaticConstructorDeclaration(decl, arg)
	{
		decl.annotations.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	public overridable visitVariableDeclarator(decl, arg)
	{
		decl.initializer?.accept(this, arg);
		return null;
	}

	// Statements

	public overridable visitBlock(block, arg)
	{
		beginBlock(block, arg);
		block.statements.acceptAll(this, arg);
		endBlock(block, arg);
		return null;
	}

	public overridable beginBlock(block, arg)
	{
	}

	public overridable endBlock(block, arg)
	{
	}

	public overridable visitBaseConstructorCall(stmt, arg)
	{
		stmt.arguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitBreakStatement(stmt, arg)
	{
		return null;
	}

	public overridable visitCompoundAssignment(stmt, arg)
	{
		stmt.left.accept(this, arg);
		stmt.right.accept(this, arg);
		return null;
	}

	public overridable visitDoWhileStatement(stmt, arg)
	{
		stmt.body.accept(this, arg);
		stmt.condition?.accept(this, arg);
		return null;
	}

	public overridable visitEmptyStatement(stmt, arg)
	{
		return null;
	}

	public overridable visitExpressionStatement(stmt, arg)
	{
		stmt.expression.accept(this, arg);
		return null;
	}

	public overridable visitForStatement(stmt, arg)
	{
		stmt.expression.accept(this, arg);
		stmt.body.accept(this, arg);
		stmt.elseClause?.accept(this, arg);
		return null;
	}

	public overridable visitIfStatement(stmt, arg)
	{
		stmt.condition.accept(this, arg);
		stmt.consequence.accept(this, arg);
		stmt.alternative?.accept(this, arg);
		return null;
	}

	public overridable visitLocalConstantDeclaration(decl, arg)
	{
		decl.constants.acceptAll(this, arg);
		return null;
	}

	public overridable visitLocalFunctionDeclaration(decl, arg)
	{
		decl.parameters.acceptAll(this, arg);
		decl.body.accept(this, arg);
		return null;
	}

	public overridable visitLocalVariableDeclaration(decl, arg)
	{
		decl.variables.acceptAll(this, arg);
		return null;
	}

	public overridable visitNextStatement(stmt, arg)
	{
		return null;
	}

	public overridable visitParallelAssignment(stmt, arg)
	{
		stmt.targets.acceptAll(this, arg);
		stmt.values.acceptAll(this, arg);
		return null;
	}

	public overridable visitParallelLocalVariableDeclaration(decl, arg)
	{
		decl.value.accept(this, arg);
		return null;
	}

	public overridable visitReturnStatement(stmt, arg)
	{
		stmt.returnValues.acceptAll(this, arg);
		return null;
	}

	public overridable visitThisConstructorCall(stmt, arg)
	{
		stmt.arguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitThrowStatement(stmt, arg)
	{
		stmt.expression?.accept(this, arg);
		return null;
	}

	public overridable visitTryStatement(stmt, arg)
	{
		visitTryClause(stmt.tryClause, arg);
		stmt.catchClauses.acceptAll(this, arg);
		if stmt.finallyClause is not null:
			visitFinallyClause(stmt.finallyClause, arg);
		return null;
	}

	public overridable visitTryClause(clause, arg)
	{
		visitBlock(clause, arg);
		return null;
	}

	public overridable visitGenericCatchClause(clause, arg)
	{
		visitBlock(clause, arg);
		return null;
	}

	public overridable visitSpecificCatchClause(clause, arg)
	{
		visitTypeName(clause.caughtType, arg);
		visitGenericCatchClause(clause, arg);
		return null;
	}

	public overridable visitFinallyClause(clause, arg)
	{
		visitBlock(clause, arg);
		return null;
	}

	public overridable visitWhileStatement(stmt, arg)
	{
		stmt.condition.accept(this, arg);
		stmt.body.accept(this, arg);
		return null;
	}

	public overridable visitWithStatement(stmt, arg)
	{
		stmt.expression.accept(this, arg);
		stmt.body.accept(this, arg);
		return null;
	}

	public overridable visitYieldStatement(stmt, arg)
	{
		stmt.returnValues.acceptAll(this, arg);
		return null;
	}

	// Expressions

	public overridable visitAssignmentExpression(expr, arg)
	{
		expr.target.accept(this, arg);
		expr.value.accept(this, arg);
		return null;
	}

	public overridable visitBaseAccess(expr, arg)
	{
		return null;
	}

	public overridable visitBinaryExpression(expr, arg)
	{
		expr.left.accept(this, arg);
		expr.right.accept(this, arg);
		return null;
	}

	public overridable visitLiteralExpression(expr, arg)
	{
		return null;
	}

	public overridable visitNullLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	public overridable visitBooleanLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	public overridable visitIntegerLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	public overridable visitRealLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	public overridable visitStringLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	public overridable visitCharLiteral(expr, arg)
	{
		return visitLiteralExpression(expr, arg);
	}

	public overridable visitConditionalAndExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	public overridable visitConditionalExpression(expr, arg)
	{
		expr.condition.accept(this, arg);
		expr.truePart.accept(this, arg);
		expr.falsePart.accept(this, arg);
		return null;
	}

	public overridable visitConditionalOrExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	public overridable visitConditionalXorExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	public overridable visitGetArgumentCountExpression(expr, arg)
	{
		return null;
	}

	public overridable visitGlobalAccess(expr, arg)
	{
		return null;
	}

	public overridable visitHashCreationExpression(expr, arg)
	{
		expr.members.acceptAll(this, arg);
		return null;
	}

	public overridable visitHashMember(member, arg)
	{
		member.key.accept(this, arg);
		member.value.accept(this, arg);
		return null;
	}

	public overridable visitIndexerAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		expr.arguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitInvocationExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		expr.arguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitIteratorAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	public overridable visitLambdaMemberExpression(expr, arg)
	{
		expr.members.acceptAll(this, arg);
		return null;
	}

	public overridable visitLambdaOperatorExpression(expr, arg)
	{
		return null;
	}

	public overridable visitListComprehension(expr, arg)
	{
		expr.comprehenders.acceptAll(this, arg);
		expr.values.acceptAll(this, arg);
		return null;
	}

	public overridable visitListComprehensionCondition(node, arg)
	{
		node.condition.accept(this, arg);
		return null;
	}

	public overridable visitListComprehensionIterator(node, arg)
	{
		node.expression.accept(this, arg);
		return null;
	}

	public overridable visitListCreationExpression(expr, arg)
	{
		expr.values.acceptAll(this, arg);
		return null;
	}

	public overridable visitMemberAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	public overridable visitNamedConstantExpression(expr, arg)
	{
		return null;
	}

	public overridable visitNullCoalescingExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	public overridable visitNullOrExpression(expr, arg)
	{
		visitBinaryExpression(expr, arg);
		return null;
	}

	public overridable visitObjectCreationExpression(expr, arg)
	{
		visitTypeName(expr.type, arg);
		expr.arguments.acceptAll(this, arg);
		expr.initializer?.accept(this, arg);
		return null;
	}

	public overridable visitObjectInitializer(initializer, arg)
	{
		initializer.members.acceptAll(this, arg);
		return null;
	}

	public overridable visitMemberInitializer(initializer, arg)
	{
		initializer.expression.accept(this, arg);
		return null;
	}

	public overridable visitCollectionInitializer(initializer, arg)
	{
		initializer.elements.acceptAll(this, arg);
		return null;
	}

	public overridable visitComprehensionInitializer(initializer, arg)
	{
		initializer.elements.acceptAll(this, arg);
		initializer.comprehenders.acceptAll(this, arg);
		return null;
	}

	public overridable visitElementInitializer(initializer, arg)
	{
		initializer.arguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitParenthesizedExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	public overridable visitRangeExpression(expr, arg)
	{
		expr.low.accept(this, arg);
		expr.high.accept(this, arg);
		expr.step?.accept(this, arg);
		return null;
	}

	public overridable visitRefExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	public overridable visitSafeAccess(expr, arg)
	{
		expr.inner.accept(this, arg);
		expr.chain.acceptAll(this, arg);
		return null;
	}

	public overridable visitSafeIndexerAccess(node, arg)
	{
		node.arguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitSafeInvocation(node, arg)
	{
		node.arguments.acceptAll(this, arg);
		return null;
	}

	public overridable visitSafeIteratorAccess(node, arg)
	{
		return null;
	}

	public overridable visitSafeMemberAccess(node, arg)
	{
		return null;
	}

	public overridable visitSimpleLambdaExpression(expr, arg)
	{
		expr.parameters.acceptAll(this, arg);
		expr.body.accept(this, arg);
		return null;
	}

	public overridable visitSimpleName(expr, arg)
	{
		return null;
	}

	public overridable visitThisAccess(expr, arg)
	{
		return null;
	}

	public overridable visitTypeOfExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	public overridable visitTypeTestExpression(expr, arg)
	{
		expr.expression.accept(this, arg);
		if expr.type is not null:
			visitTypeName(expr.type, arg);
		return null;
	}

	public overridable visitUnaryExpression(expr, arg)
	{
		expr.inner.accept(this, arg);
		return null;
	}

	public overridable visitUseInExpression(expr, arg)
	{
		expr.variables.acceptAll(this, arg);
		expr.expression.accept(this, arg);
		return null;
	}

	// Type names

	public overridable visitTypeName(typeName, arg)
	{
		return null;
	}
}
