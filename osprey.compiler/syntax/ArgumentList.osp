use namespace aves;

namespace osprey.compiler.syntax;

/// Summary: Implements an immutable list of {Expression} instances, which represent
///          arguments to a function member (such as a method, indexer or constructor).
///          This collection is a specialised kind of {NodeList}, containing members
///          that simplify handling of argument lists.
public inheritable ArgumentList is NodeList
{
	public new()
	{
		new this([], false);
	}
	public new(items)
	{
		new base(items);
	}
	public new(items, hasRefArguments)
	{
		new base(items);
		_hasRefArguments = bool(hasRefArguments);
	}

	private _hasRefArguments;
	/// Summary: Determines whether the argument list contains any {RefExpression}s;
	///          that is, whether any argument is passed by reference.
	public get hasRefArguments
	{
		// Initialize on demand
		if _hasRefArguments is null:
			_hasRefArguments = any(isByRef);
		return _hasRefArguments;
	}

	private static isByRef(expr)
	{
		return expr is RefExpression;
	}
}
